---
title: "Blaker's Method (N Unknown)"
author: "Rachel Roggenkemper"
format: html
editor: visual
---

```{r}
library(extraDistr)
library(tidyverse)

source('../functions.R', encoding = 'UTF-8')
```

## Acceptance Curves (Function)

```{r}
# When finding all x's with min tail prob as small, including the fixed_x 
blaker_ac_N_unkown <- function(M, m, conf_level = 0.95, max_N = 250) {
  alpha = 1 - conf_level 
  
  # Initializing data frame to store info through iterations
  results = data.frame(N = integer(), 
                       x = integer(), 
                       min_tail_prob = numeric(), 
                       acceptance_set = character())
  
  # Calculates min_tail_prob for each N and x
  # Iterating through each N
  for (N in M:max_N) {
    # Iterating through each x 
    for (x in 0:(N - M)) {
      # Calculates min_tail_prob
      area_left = ngh_cdf(x = x, N = N, M = M, m = m, lower_tail = TRUE)
      area_right = ngh_cdf(x = x - 1, N = N, M = M, m = m, lower_tail = FALSE)
      min_tail_prob = min(area_left, area_right)
      
      # Stores min_tail_prob in a dataframe along with coresponding M and x
      results = rbind(results, data.frame(N = N, 
                                          x = x,
                                          min_tail_prob = min_tail_prob,
                                          acceptance_set = NA))
    }
  }
  
  # Initializes data frame for output 
  final_results = data.frame(N = integer(), 
                             acceptance_set = character(), 
                             a = integer(), 
                             b = integer(), 
                             cardinality = integer(), 
                             coverage_prob = numeric(), 
                             x_set = character(), 
                             gap = logical())
  
  # Calculate the acceptance sets based on min_tail_prob
  # Iterating through each N
  for (fixed_N in M:max_N) {
    acceptance_set = c()
    x_set = ""

    # Iterating through each x 
    for (fixed_x in 0:(fixed_N - M)) {
      # Finds the min_tail_prob for the fixed_N and fixed_x
      min_tail_prob_fixed_x = results %>% 
        filter(N == fixed_N & x == fixed_x) %>% 
        select(min_tail_prob) %>% 
        pull()
      
      # Finds all x's with min_tail_prob as small as the fixed_x (includes fixed_x)
      possible_xs = results %>% 
        filter(N == fixed_N & min_tail_prob <= min_tail_prob_fixed_x) %>% 
        select(x) %>% 
        pull()
      
      # Sums up the pmf of all x's with min-tail prob as small as fixed_x
      prob_sum = sum(unlist(lapply(possible_xs, function(px) ngh_pmf(x = px, 
                                                                     N = fixed_N, 
                                                                     M = M, 
                                                                     m = m))))
      
      # If the sum of pmf is greater than alpha, add the fixed_x to the acceptance set 
      if (prob_sum > alpha) {
        acceptance_set = c(acceptance_set, fixed_x)
      }
    }
  
    acceptance_set = as.numeric(acceptance_set)
    acceptance_set_str = paste(unique(acceptance_set), collapse = ",")
    
    # Calculating cardinality and coverage probability 
    a = min(acceptance_set)
    b = max(acceptance_set)
    cardinality = length(acceptance_set)
    coverage_prob = sum(unlist(lapply(acceptance_set, function(px) ngh_pmf(x = px, 
                                                                           N = fixed_N, 
                                                                           M = M, 
                                                                           m = m))))
    # gap is a boolean (TRUE / FALSE) of whether there is a gap present in acceptance set
    gap = any(diff(sort(acceptance_set)) > 1)
    
    # If there is no gap, formatting x_set
    if (!gap) {
      x_set = paste(a, b, sep = "-")
    } 
    # When there is a gap, formatting x_set 
    else {
      intervals = c()
      start = acceptance_set[1]
      for (i in 2:length(acceptance_set)) {
        if (acceptance_set[i] != acceptance_set[i - 1] + 1) {
          intervals = c(intervals, paste(start, acceptance_set[i - 1], sep = "-"))
          start = acceptance_set[i]
        }
      }
      intervals = c(intervals, 
                    paste(start, acceptance_set[length(acceptance_set)], sep = "-"))
      x_set = paste(intervals, collapse = ", ")
    }
    
    # Adding final_results to the data frame to be outputted 
    final_results = rbind(final_results, 
                          data.frame(N = fixed_N, 
                                     acceptance_set = acceptance_set_str, 
                                     a = a, 
                                     b = b, 
                                     cardinality = cardinality, 
                                     coverage_prob = coverage_prob, 
                                     x_set = x_set, 
                                     gap = gap))
  }
  final_results = final_results %>%
    arrange(N)
  
  return(final_results)
}
```

```{r}
blaker_ac_N_unkown(M = 10, m = 5, conf_level = 0.95, max_N = 40)
```

## Confidence Intervals Bounds (Function)

```{r}
blaker_ci_N_unkown <- function(M, m, conf_level = 0.95, max_N = 250, procedure = "MST") {
  results = blaker_ac_N_unkown(M, m, conf_level)
  
  # Check if there are any gaps
  if (any(results$gap)) {
    return("Gaps present in acceptance sets")
  }
  
  # Initializes data frame that will be outputted 
  ci_results = data.frame(x = integer(), 
                          ci_lb = integer(), 
                          ci_ub = integer(), 
                          ci = character(),
                          stringsAsFactors = FALSE)
  
  # Find the second-highest "a"
  unique_a_values <- sort(unique(results$a), decreasing = TRUE)
  if (length(unique_a_values) > 1) {
    max_x <- unique_a_values[2]  # Second-highest value
  } else {
    max_x <- unique_a_values[1]  # Fallback if only one value exists
  }
  
  # Loops through each x 
  for (x in 0:max_x) {
    # Finds first interval where x appears 
    first_occurrence = results %>% 
      filter(a <= x, x <= b) %>% 
      slice(1)
    
    # Finds last interval where x appears 
    last_occurrence = results %>% 
      filter(a <= x, x <= b) %>% 
      slice(n())
    
    # Finds the N of the corresponding above intervals and saves those as the CI bounds
    if (nrow(first_occurrence) > 0 && nrow(last_occurrence) > 0) {
      ci_lb = first_occurrence$N
      ci_ub = last_occurrence$N
      ci = paste0("[", ci_lb, ", ", ci_ub, "]")
      
      ci_results = rbind(ci_results, data.frame(x = x, 
                                                ci_lb = ci_lb, 
                                                ci_ub = ci_ub, 
                                                ci = ci))
    }
  }
  
  return(ci_results)
}
```

```{r}
blaker_ci_N_unkown(M = 10, m = 5, conf_level = 0.95, max_N = 60)
```
