---
title: "Minimal Cardinality Procedures (N Unkown)"
author: "Rachel Roggenkemper"
format: html
editor: visual
---

## Loading in Packages and Functions

```{r}
library(extraDistr)
library(tidyverse)

source('../functions.R', encoding = 'UTF-8')
```

# Minimal Cardinality Acceptance Curves

## Manually Testing: M = 10, m = 5, CL = 0.95

### N = 10

-\> 0-0 with CP = 1

```{r}
sum_ngh_pmf(N = 10, M = 10, m = 5, min_x = 0, max_x = 0)
sum_ngh_pmf(N = 10, M = 10, m = 5, min_x = 1, max_x = 1)

sum_ngh_pmf(N = 10, M = 10, m = 5, min_x = 0, max_x = 1)
```

### N = 11

-\> 0-1 with CP = 1

```{r}
sum_ngh_pmf(N = 11, M = 10, m = 5, min_x = 0, max_x = 0)
sum_ngh_pmf(N = 11, M = 10, m = 5, min_x = 1, max_x = 1)

sum_ngh_pmf(N = 11, M = 10, m = 5, min_x = 0, max_x = 1)
```

### N = 12

-\> 0-2 with CP = 1

```{r}
sum_ngh_pmf(N = 12, M = 10, m = 5, min_x = 0, max_x = 1)
sum_ngh_pmf(N = 12, M = 10, m = 5, min_x = 1, max_x = 2)

sum_ngh_pmf(N = 12, M = 10, m = 5, min_x = 0, max_x = 2)
sum_ngh_pmf(N = 12, M = 10, m = 5, min_x = 1, max_x = 3)
```

### N = 13

-\> 0-3 with CP = 1

```{r}
sum_ngh_pmf(N = 13, M = 10, m = 5, min_x = 0, max_x = 2)
sum_ngh_pmf(N = 13, M = 10, m = 5, min_x = 1, max_x = 3)

sum_ngh_pmf(N = 13, M = 10, m = 5, min_x = 0, max_x = 3)
sum_ngh_pmf(N = 13, M = 10, m = 5, min_x = 1, max_x = 4)
```

### N = 14

-\> 0-4 with CP = 1

```{r}
sum_ngh_pmf(N = 14, M = 10, m = 5, min_x = 0, max_x = 3)
sum_ngh_pmf(N = 14, M = 10, m = 5, min_x = 1, max_x = 4)

sum_ngh_pmf(N = 14, M = 10, m = 5, min_x = 0, max_x = 4)
sum_ngh_pmf(N = 14, M = 10, m = 5, min_x = 1, max_x = 5)
```

### N = 15

-\> 0-4 with CP = 0.958042

```{r}
sum_ngh_pmf(N = 15, M = 10, m = 5, min_x = 0, max_x = 4)
sum_ngh_pmf(N = 15, M = 10, m = 5, min_x = 1, max_x = 5)
```

### N = 16

-\> 0-5 with CP = 0.9737762

```{r}
sum_ngh_pmf(N = 16, M = 10, m = 5, min_x = 0, max_x = 4)
sum_ngh_pmf(N = 16, M = 10, m = 5, min_x = 1, max_x = 5)
sum_ngh_pmf(N = 16, M = 10, m = 5, min_x = 2, max_x = 6)

sum_ngh_pmf(N = 16, M = 10, m = 5, min_x = 0, max_x = 5)
sum_ngh_pmf(N = 16, M = 10, m = 5, min_x = 1, max_x = 6)
sum_ngh_pmf(N = 16, M = 10, m = 5, min_x = 2, max_x = 7)
```

### N = 17

-\> 0-6 with CP = 0.9830317

-\> 1-7 with CP = 0.959276

```{r}
sum_ngh_pmf(N = 17, M = 10, m = 5, min_x = 0, max_x = 5)
sum_ngh_pmf(N = 17, M = 10, m = 5, min_x = 1, max_x = 6)
sum_ngh_pmf(N = 17, M = 10, m = 5, min_x = 2, max_x = 7)

sum_ngh_pmf(N = 17, M = 10, m = 5, min_x = 0, max_x = 6)
sum_ngh_pmf(N = 17, M = 10, m = 5, min_x = 1, max_x = 7)
sum_ngh_pmf(N = 17, M = 10, m = 5, min_x = 2, max_x = 8)
```

### N = 18

-\> 1-7 with CP = 0.959276

```{r}
sum_ngh_pmf(N = 18, M = 10, m = 5, min_x = 1, max_x = 7)
sum_ngh_pmf(N = 18, M = 10, m = 5, min_x = 2, max_x = 8)
```

### N = 19

-\> 1-8 with CP = 0.9705882

```{r}
sum_ngh_pmf(N = 19, M = 10, m = 5, min_x = 1, max_x = 7)
sum_ngh_pmf(N = 19, M = 10, m = 5, min_x = 2, max_x = 8)

sum_ngh_pmf(N = 19, M = 10, m = 5, min_x = 1, max_x = 8)
sum_ngh_pmf(N = 19, M = 10, m = 5, min_x = 2, max_x = 9)
```

### N = 20

-\> 1-8 with CP = 0.9551084

```{r}
sum_ngh_pmf(N = 20, M = 10, m = 5, min_x = 1, max_x = 8)
sum_ngh_pmf(N = 20, M = 10, m = 5, min_x = 2, max_x = 9)
```

### N = 21

-\> 1-9 with CP = 0.9667183

```{r}
sum_ngh_pmf(N = 21, M = 10, m = 5, min_x = 1, max_x = 8)
sum_ngh_pmf(N = 21, M = 10, m = 5, min_x = 2, max_x = 9)
sum_ngh_pmf(N = 21, M = 10, m = 5, min_x = 3, max_x = 10)

sum_ngh_pmf(N = 21, M = 10, m = 5, min_x = 1, max_x = 9)
sum_ngh_pmf(N = 21, M = 10, m = 5, min_x = 2, max_x = 10)
sum_ngh_pmf(N = 21, M = 10, m = 5, min_x = 3, max_x = 11)
```

### N = 22

-\> 1-10 with CP = 0.9749507

-\> 2-11 with CP = 0.9538418

```{r}
sum_ngh_pmf(N = 22, M = 10, m = 5, min_x = 1, max_x = 9)
sum_ngh_pmf(N = 22, M = 10, m = 5, min_x = 2, max_x = 10)
sum_ngh_pmf(N = 22, M = 10, m = 5, min_x = 3, max_x = 11)

sum_ngh_pmf(N = 22, M = 10, m = 5, min_x = 1, max_x = 10)
sum_ngh_pmf(N = 22, M = 10, m = 5, min_x = 2, max_x = 11)
sum_ngh_pmf(N = 22, M = 10, m = 5, min_x = 3, max_x = 12)
```

### N = 23

-\> 1-10 with CP = 0.9558303

-\> 2-11 with CP = 0.9538418

```{r}
sum_ngh_pmf(N = 23, M = 10, m = 5, min_x = 1, max_x = 10)
sum_ngh_pmf(N = 23, M = 10, m = 5, min_x = 2, max_x = 11)
sum_ngh_pmf(N = 23, M = 10, m = 5, min_x = 3, max_x = 12)
```

### N = 24

-\> 1-11 with CP = 0.9657424

-\> 2-12 with CP = 0.9633867

```{r}
sum_ngh_pmf(N = 24, M = 10, m = 5, min_x = 1, max_x = 10)
sum_ngh_pmf(N = 24, M = 10, m = 5, min_x = 2, max_x = 11)
sum_ngh_pmf(N = 24, M = 10, m = 5, min_x = 3, max_x = 12)

sum_ngh_pmf(N = 24, M = 10, m = 5, min_x = 1, max_x = 11)
sum_ngh_pmf(N = 24, M = 10, m = 5, min_x = 2, max_x = 12)
sum_ngh_pmf(N = 24, M = 10, m = 5, min_x = 3, max_x = 13)
```

### N = 25

-\> 2-12 with CP = 0.9553776

```{r}
sum_ngh_pmf(N = 25, M = 10, m = 5, min_x = 1, max_x = 11)
sum_ngh_pmf(N = 25, M = 10, m = 5, min_x = 2, max_x = 12)
sum_ngh_pmf(N = 25, M = 10, m = 5, min_x = 3, max_x = 13)
```

### N = 26

-\> 2-13 with CP = 0.9641868

```{r}
sum_ngh_pmf(N = 26, M = 10, m = 5, min_x = 2, max_x = 12)
sum_ngh_pmf(N = 26, M = 10, m = 5, min_x = 3, max_x = 13)

sum_ngh_pmf(N = 26, M = 10, m = 5, min_x = 2, max_x = 13)
sum_ngh_pmf(N = 26, M = 10, m = 5, min_x = 3, max_x = 14)
```

### N = 27

-\> 2-13 with CP = 0.9507022

```{r}
sum_ngh_pmf(N = 27, M = 10, m = 5, min_x = 2, max_x = 13)
sum_ngh_pmf(N = 27, M = 10, m = 5, min_x = 3, max_x = 14)
```

### N = 28

-\> 2-14 with CP = 0.9598155

-\> 3-15 with CP = 0.9530962

```{r}
sum_ngh_pmf(N = 28, M = 10, m = 5, min_x = 2, max_x = 13)
sum_ngh_pmf(N = 28, M = 10, m = 5, min_x = 3, max_x = 14)
sum_ngh_pmf(N = 28, M = 10, m = 5, min_x = 4, max_x = 15)

sum_ngh_pmf(N = 28, M = 10, m = 5, min_x = 2, max_x = 14)
sum_ngh_pmf(N = 28, M = 10, m = 5, min_x = 3, max_x = 15)
sum_ngh_pmf(N = 28, M = 10, m = 5, min_x = 4, max_x = 16)
```

### N = 29

-\> 2-15 with CP = 0.9670245

-\> 3-16 with CP = 0.9608493

```{r}
sum_ngh_pmf(N = 29, M = 10, m = 5, min_x = 2, max_x = 14)
sum_ngh_pmf(N = 29, M = 10, m = 5, min_x = 3, max_x = 15)
sum_ngh_pmf(N = 29, M = 10, m = 5, min_x = 4, max_x = 16)

sum_ngh_pmf(N = 29, M = 10, m = 5, min_x = 2, max_x = 15)
sum_ngh_pmf(N = 29, M = 10, m = 5, min_x = 3, max_x = 16)
sum_ngh_pmf(N = 29, M = 10, m = 5, min_x = 4, max_x = 17)
```

### N = 30

-\> 2-15 with CP = 0.9524496

-\> 3-16 with CP = 0.9559689

```{r}
sum_ngh_pmf(N = 30, M = 10, m = 5, min_x = 2, max_x = 15)
sum_ngh_pmf(N = 30, M = 10, m = 5, min_x = 3, max_x = 16)
sum_ngh_pmf(N = 30, M = 10, m = 5, min_x = 4, max_x = 17)
```

### N = 31

-\> 2-16 with CP = 0.9603731

-\> 3-17 with CP = 0.9630009

```{r}
sum_ngh_pmf(N = 31, M = 10, m = 5, min_x = 2, max_x = 15)
sum_ngh_pmf(N = 31, M = 10, m = 5, min_x = 3, max_x = 16)
sum_ngh_pmf(N = 31, M = 10, m = 5, min_x = 4, max_x = 17)

sum_ngh_pmf(N = 31, M = 10, m = 5, min_x = 2, max_x = 16)
sum_ngh_pmf(N = 31, M = 10, m = 5, min_x = 3, max_x = 17)
sum_ngh_pmf(N = 31, M = 10, m = 5, min_x = 4, max_x = 18)
```

### N = 32

-\> 3-17 with CP = 0.954456

```{r}
sum_ngh_pmf(N = 32, M = 10, m = 5, min_x = 2, max_x = 16)
sum_ngh_pmf(N = 32, M = 10, m = 5, min_x = 3, max_x = 17)
sum_ngh_pmf(N = 32, M = 10, m = 5, min_x = 4, max_x = 18)
```

### N = 33

-\> 3-18 with CP = 0.9614058

-\> 4-19 with CP = 0.9533698

```{r}
sum_ngh_pmf(N = 33, M = 10, m = 5, min_x = 3, max_x = 17)
sum_ngh_pmf(N = 33, M = 10, m = 5, min_x = 4, max_x = 18)

sum_ngh_pmf(N = 33, M = 10, m = 5, min_x = 3, max_x = 18)
sum_ngh_pmf(N = 33, M = 10, m = 5, min_x = 4, max_x = 19)
sum_ngh_pmf(N = 33, M = 10, m = 5, min_x = 5, max_x = 20)
```

### N = 34

-\> 3-18 with CP = 0.9501284

```{r}
sum_ngh_pmf(N = 34, M = 10, m = 5, min_x = 3, max_x = 18)
sum_ngh_pmf(N = 34, M = 10, m = 5, min_x = 4, max_x = 19)
sum_ngh_pmf(N = 34, M = 10, m = 5, min_x = 5, max_x = 20)
```

### N = 35

-\> 3-19 with CP = 0.9573237

-\> 4-20 with CP = 0.9565186

```{r}
sum_ngh_pmf(N = 35, M = 10, m = 5, min_x = 3, max_x = 18)
sum_ngh_pmf(N = 35, M = 10, m = 5, min_x = 4, max_x = 19)
sum_ngh_pmf(N = 35, M = 10, m = 5, min_x = 5, max_x = 20)

sum_ngh_pmf(N = 35, M = 10, m = 5, min_x = 3, max_x = 19)
sum_ngh_pmf(N = 35, M = 10, m = 5, min_x = 4, max_x = 20)
sum_ngh_pmf(N = 35, M = 10, m = 5, min_x = 5, max_x = 21)
```

### N = 36

-\> 3-20 with CP = 0.9633421

-\> 4-21 with CP = 0.9623507

```{r}
sum_ngh_pmf(N = 36, M = 10, m = 5, min_x = 3, max_x = 19)
sum_ngh_pmf(N = 36, M = 10, m = 5, min_x = 4, max_x = 20)
sum_ngh_pmf(N = 36, M = 10, m = 5, min_x = 5, max_x = 21)

sum_ngh_pmf(N = 36, M = 10, m = 5, min_x = 3, max_x = 20)
sum_ngh_pmf(N = 36, M = 10, m = 5, min_x = 4, max_x = 21)
sum_ngh_pmf(N = 36, M = 10, m = 5, min_x = 5, max_x = 22)
```

### N = 37

-\> 3-20 with CP = 0.9516183

-\> 4-21 with CP = 0.956464

```{r}
sum_ngh_pmf(N = 37, M = 10, m = 5, min_x = 3, max_x = 20)
sum_ngh_pmf(N = 37, M = 10, m = 5, min_x = 4, max_x = 21)
sum_ngh_pmf(N = 37, M = 10, m = 5, min_x = 5, max_x = 22)
```

### N = 38

-\> 3-21 with CP = 0.9580471

-\> 4-22 with CP = 0.9621069

-\> 5-23 with CP = 0.9538776

```{r}
sum_ngh_pmf(N = 38, M = 10, m = 5, min_x = 3, max_x = 20)
sum_ngh_pmf(N = 38, M = 10, m = 5, min_x = 4, max_x = 21)
sum_ngh_pmf(N = 38, M = 10, m = 5, min_x = 5, max_x = 22)

sum_ngh_pmf(N = 38, M = 10, m = 5, min_x = 3, max_x = 21)
sum_ngh_pmf(N = 38, M = 10, m = 5, min_x = 4, max_x = 22)
sum_ngh_pmf(N = 38, M = 10, m = 5, min_x = 5, max_x = 23)
sum_ngh_pmf(N = 38, M = 10, m = 5, min_x = 6, max_x = 24)
```

### N = 39

-\> 4-22 with CP = 0.9541562

-\> 5-23 with CP = 0.9512189

```{r}
sum_ngh_pmf(N = 39, M = 10, m = 5, min_x = 3, max_x = 21)
sum_ngh_pmf(N = 39, M = 10, m = 5, min_x = 4, max_x = 22)
sum_ngh_pmf(N = 39, M = 10, m = 5, min_x = 5, max_x = 23)
sum_ngh_pmf(N = 39, M = 10, m = 5, min_x = 6, max_x = 24)
```

### N = 40

-\> 4-23 with CP = 0.9598531

-\> 5-24 with CP = 0.9569813

```{r}
sum_ngh_pmf(N = 40, M = 10, m = 5, min_x = 4, max_x = 22)
sum_ngh_pmf(N = 40, M = 10, m = 5, min_x = 5, max_x = 23)
sum_ngh_pmf(N = 40, M = 10, m = 5, min_x = 6, max_x = 24)

sum_ngh_pmf(N = 40, M = 10, m = 5, min_x = 4, max_x = 23)
sum_ngh_pmf(N = 40, M = 10, m = 5, min_x = 5, max_x = 24)
sum_ngh_pmf(N = 40, M = 10, m = 5, min_x = 6, max_x = 25)
```

## All Minimal Cardinality Acceptance Curves (Function)

```{r}
all_mc_ac_N_unknown <- function(M, m, conf_level = 0.95, max_N = 1000) {
  # Initializing the data frame that the function will output 
  results = data.frame(N = integer(), 
                       a = integer(), 
                       b = integer(), 
                       cardinality = integer(), 
                       coverage_prob = numeric())
  
  # Setting the initial min_a and min_b, always starts with 0-0
  min_a = 0
  min_b = 0
  max_x = max_N - M
  
  for (N in M:max_N) {
    # Initializing a data frame that temporarily stores results
    temp_results = data.frame(N = integer(), 
                              a = integer(), 
                              b = integer(), 
                              cardinality = integer(), 
                              coverage_prob = numeric())
    
    # Loops through the a first, making sure it only starts at min_a so that a is 
    # non-decreasing, stops at a max_x
    for (a in min_a:max_x) {
      # Loops through b: starting at the max of a and min_b to make sure that b >= a and 
      # so that b is non-decreasing, stops at max_x
      for (b in max(a, min_b):max_x) {
        # Calculates coverage probability, cardinality, and stores it in data frame
        coverage_prob = sum_ngh_pmf(N, M, m, a, b)
        cardinality = b - a + 1
        temp_results = rbind(temp_results, data.frame(N = N, 
                                                      a = a, 
                                                      b = b, 
                                                      cardinality = cardinality, 
                                                      coverage_prob = coverage_prob))
      }
    }

    # Filter out the sets with the smallest cardinality and coverage probability >= conf_level 
    temp_results = temp_results %>%
      filter(coverage_prob >= conf_level) %>%
      group_by(N) %>%
      slice_min(order_by = cardinality, with_ties = TRUE) %>%
      ungroup()
    
    # Updates min_a and min_b for each iteration 
    if (nrow(temp_results) > 0) {
      min_a = max(min_a, min(temp_results$a))
      min_b = max(min_b, min(temp_results$b))
      
      # Store the results from this iteration
      results <- rbind(results, temp_results)
    }
  }

  # Adds a column of the x set
  filtered_results = results %>%
    mutate(x_set = paste(a, b, sep = "-"))
  
  return(filtered_results)
}
```

### Plot of All Possible Minimal Cardinality Acceptance Curves

```{r}
all_ac_mc_M_10_m_4 = all_mc_ac_N_unknown(M = 10, m = 5, conf_level = 0.95, max_N = 40)
all_ac_mc_M_10_m_4
```

```{r}
conf_level= 0.95

ggplot(all_ac_mc_M_10_m_4, aes(x = N, 
                               y = coverage_prob, 
                               group = x_set, 
                               color = x_set)) +
  geom_line() +
  geom_point() +
  labs(x = "N", y = "Coverage Probability of N") +
  geom_hline(yintercept = conf_level, color = "red") +
  ylim(conf_level - 0.005, 1) +
  theme_minimal() +
  theme(legend.position = "none")
```

```{r}
plot_all_ac_N_unknown <- function(M, m, conf_level = 0.95, max_N = 1000) {
  # Initializing the data frame that the function will output 
  results = data.frame(N = integer(), 
                       a = integer(), 
                       b = integer(), 
                       cardinality = integer(), 
                       coverage_prob = numeric())
  
  # Setting the initial min_a and min_b, always starts with 0-0
  min_a = 0
  min_b = 0
  max_x = max_N - M
  
  for (N in M:max_N) {
    # Initializing a data frame that temporarily stores results
    temp_results = data.frame(N = integer(), 
                              a = integer(), 
                              b = integer(), 
                              cardinality = integer(), 
                              coverage_prob = numeric())
    
    # Loops through the a first, making sure it only starts at min_a so that a is 
    # non-decreasing, stops at a max_x
    for (a in min_a:max_x) {
      # Loops through b: starting at the max of a and min_b to make sure that b >= a and 
      # so that b is non-decreasing, stops at max_x
      for (b in max(a, min_b):max_x) {
        # Calculates coverage probability, cardinality, and stores it in data frame
        coverage_prob = sum_ngh_pmf(N, M, m, a, b)
        cardinality = b - a + 1
        temp_results = rbind(temp_results, data.frame(N = N, 
                                                      a = a, 
                                                      b = b, 
                                                      cardinality = cardinality, 
                                                      coverage_prob = coverage_prob))
      }
    }

    # Filter out the sets with the smallest cardinality and coverage probability >= conf_level 
    # temp_results = temp_results %>%
    #   filter(coverage_prob >= conf_level) %>%
    #   group_by(N) %>%
    #   slice_min(order_by = cardinality, with_ties = TRUE) %>%
    #   ungroup()
    
    temp_results = temp_results %>%
      filter(coverage_prob >= 0 & coverage_prob <= 1)
    
    # Updates min_a and min_b for each iteration 
    if (nrow(temp_results) > 0) {
      min_a = max(min_a, min(temp_results$a))
      min_b = max(min_b, min(temp_results$b))
      
      # Store the results from this iteration
      results <- rbind(results, temp_results)
    }
  }

  # Adds a column of the x set
  filtered_results = results %>%
    mutate(x_set = paste(a, b, sep = "-"))
  
  return(filtered_results)
}
```

```{r}
# Plot of All (non-decreasing) Acceptance Curves
plot = plot_all_ac_N_unknown(M = 10, m = 5, conf_level = 0.95, max_N = 40)
conf_level= 0.95

ggplot(plot, aes(x = N, 
                 y = coverage_prob, 
                 group = x_set, 
                 color = x_set)) +
  geom_line() +
  geom_point() +
  labs(x = "N", y = "Coverage Probability of N") +
  geom_hline(yintercept = conf_level, color = "red") +
  ylim(conf_level - 0.005, 1) +
  theme_minimal() +
  theme(legend.position = "none")
```

```{r}
# Plot of All Minimal Cardinality Acceptance Curves (with trends shown)
filtered_plot <- plot %>%
  filter(x_set %in% all_ac_mc_M_10_m_4$x_set)

conf_level= 0.95

ggplot(filtered_plot, aes(x = N, 
                 y = coverage_prob, 
                 group = x_set, 
                 color = x_set)) +
  geom_line() +
  geom_point() +
  labs(x = "N", y = "Coverage Probability of N") +
  geom_hline(yintercept = conf_level, color = "red") +
  ylim(conf_level - 0.005, 1) +
  theme_minimal() +
  theme(legend.position = "none")
```

## MST Acceptance Curves (Function)

```{r}
mst_ac_N_unknown <- function(M, m, conf_level = 0.95, max_N = 1000) {
  # Gets all minimal cardinality acceptance curves 
  results = all_mc_ac_N_unknown(M, m, conf_level, max_N)
  
  # Initializes data frame that will be outputted 
  final_results = data.frame(N = integer(), 
                             a = integer(), 
                             b = integer(), 
                             cardinality = integer(), 
                             coverage_prob = numeric(), 
                             x_set = character())
  
  # Initializes min_a and min_b, starting at 0-0
  min_a = 0
  min_b = 0
  
  # Loops through with each N 
  for (current_N in M:max_N) {
    # Only looks at acceptance curves for the current N
    subset_results = results %>% 
      filter(N == current_N)
    
    # If only one acceptance curve, then that is the acceptance curve  
    if (nrow(subset_results) == 1) {
      chosen_row = subset_results
    } 
    
    # If has more than one option, apply MST procedure
    # Filters so a and b are non-decreasing, and then chooses the row with the highest 
    # coverage probability 
    else {
      chosen_row = subset_results %>% 
        filter(a >= min_a, b >= min_b) %>% 
        arrange(desc(coverage_prob), desc(a), desc(b)) %>% 
        slice(1)
    }
    
    # Updates min_a and min_b and then adds row to final outputted data frame 
    if (nrow(chosen_row) > 0) {
      min_a = max(min_a, chosen_row$a)
      min_b = max(min_b, chosen_row$b)
      final_results = rbind(final_results, chosen_row)
    }
  }
  
  final_results = final_results %>%
    arrange(N)
  
  return(final_results)
}
```

```{r}
mst_ac_N_unknown(M = 10, m = 5, conf_level = 0.95, max_N = 40)
```

## CG Acceptance Curves (Function)

```{r}
cg_ac_N_unknown <- function(M, m, conf_level = 0.95, max_N = 1000) {
  # Gets all minimal cardinality acceptance curves
  results = all_mc_ac_N_unknown(M, m, conf_level, max_N)
  
  # Initializes data frame that will be outputted 
  final_results = data.frame(N = integer(), 
                             a = integer(), 
                             b = integer(), 
                             cardinality = integer(), 
                             coverage_prob = numeric(), 
                             x_set = character())
  
  # Initializes min_a and min_b, starting at 0-0
  min_a = 0
  min_b = 0
  
  # Loops through with each N
  for (current_N in M:max_N) {
    # Only looks at acceptance curves for the current M 
    subset_results = results %>% 
      filter(N == current_N)
    
    # If only one acceptance curve, then that is the acceptance curve 
    if (nrow(subset_results) == 1) {
      chosen_row = subset_results
    } 
    
    # If has more than one option, apply CG procedure
    # Filters so a and b are non-decreasing, and then chooses the row with the smallest 
    # possible a and b
    else {
      chosen_row = subset_results %>% 
        filter(a >= min_a, b >= min_b) %>% 
        arrange(a, b) %>% 
        slice(1)
    }
    
    # Updates min_a and min_b and then adds row to final outputted data frame 
    if (nrow(chosen_row) > 0) {
      min_a = max(min_a, chosen_row$a)
      min_b = max(min_b, chosen_row$b)
      final_results = rbind(final_results, chosen_row)
    }
  }
  
  final_results = final_results %>%
    arrange(N)
  
  return(final_results)
}
```

```{r}
cg_ac_N_unknown(M = 10, m = 5, conf_level = 0.95, max_N = 40)
```

## BK Acceptance Curves (Function)

```{r}
bk_ac_N_unknown <- function(M, m, conf_level = 0.95, max_N = 1000) {
  # Gets all minimal cardinality acceptance curves
  results = all_mc_ac_N_unknown(M, m, conf_level, max_N)
  
  # Initializes data frame that will be outputted 
  final_results = data.frame(N = integer(), 
                             a = integer(), 
                             b = integer(), 
                             cardinality = integer(), 
                             coverage_prob = numeric(), 
                             x_set = character())
  
  # Initializes min_a and min_b, starting at 0-0
  min_a = 0
  min_b = 0
  
  # Loops through with each N
  for (current_N in M:max_N) {
    # Only looks at acceptance curves for the current M 
    subset_results = results %>% 
      filter(N == current_N)
    
    # If only one acceptance curve, then that is the acceptance curve 
    if (nrow(subset_results) == 1) {
      chosen_row = subset_results
    } 
    
    # If has more than one option, apply BK procedure
    # Filters so a and b are non-decreasing, and then chooses the row with the largest 
    # possible a and b
    else {
      chosen_row = subset_results %>% 
        filter(a >= min_a, b >= min_b) %>% 
        arrange(desc(a), desc(b)) %>% 
        slice(1)
    }
    
    # Updates min_a and min_b and then adds row to final outputted data frame 
    if (nrow(chosen_row) > 0) {
      min_a = max(min_a, chosen_row$a)
      min_b = max(min_b, chosen_row$b)
      final_results = rbind(final_results, chosen_row)
    }
  }
  
  final_results = final_results %>%
    arrange(N)
  
  return(final_results)
}
```

```{r}
bk_ac_N_unknown(M = 10, m = 5, conf_level = 0.95, max_N = 40)
```

## Confidence Intervals Bounds (Function)

```{r}
minimal_cardinality_ci_N_unkown <- function(M, m, conf_level = 0.95, max_N = 1000, 
                                            procedure = "MST") {
  # Chooses which minimal cardinality procedure 
  if (procedure == "MST") {
    results = mst_ac_N_unknown(M, m, conf_level, max_N)
  } 
  else if (procedure == "CG") {
    results = cg_ac_N_unknown(M, m, conf_level, max_N)
  } 
  else if (procedure == "BK") {
    results = bk_ac_N_unknown(M, m, conf_level, max_N)
  } 
  else {
    stop("Invalid procedure. Choose from 'MST', 'CG', or 'BK'.")
  }
  
  # Initializes data frame that will be outputted 
  ci_results = data.frame(x = integer(), 
                          ci_lb = integer(), 
                          ci_ub = integer(), 
                          ci = character(),
                          stringsAsFactors = FALSE)
  
  # Find the second-highest "a"
  unique_a_values <- sort(unique(results$a), decreasing = TRUE)
  if (length(unique_a_values) > 1) {
    max_x <- unique_a_values[2]  # Second-highest value
  } else {
    max_x <- unique_a_values[1]  # Fallback if only one value exists
  }
  
  # Loops through each x 
  for (x in 0:max_x) {
    # Finds first interval where x appears 
    first_occurrence = results %>% 
      filter(a <= x, x <= b) %>% 
      slice(1)
    
    # Finds last interval where x appears 
    last_occurrence = results %>% 
      filter(a <= x, x <= b) %>% 
      slice(n())
    
    # Finds the N of the corresponding above intervals and saves those as the CI bounds
    if (nrow(first_occurrence) > 0 && nrow(last_occurrence) > 0) {
      ci_lb = first_occurrence$N
      ci_ub = last_occurrence$N
      ci = paste0("[", ci_lb, ", ", ci_ub, "]")
      
      ci_results = rbind(ci_results, data.frame(x = x, 
                                                ci_lb = ci_lb, 
                                                ci_ub = ci_ub, 
                                                ci = ci))
    }
  }
  
  return(ci_results)
}
```

```{r}
# Takes about 30 seconds to run
minimal_cardinality_ci_N_unkown(M = 10, m = 5, conf_level = 0.95, max_N = 60, 
                                procedure = "MST")
```

```{r}
minimal_cardinality_ci_N_unkown(M = 10, m = 5, conf_level = 0.95, max_N = 60, 
                                procedure = "CG")
```

```{r}
minimal_cardinality_ci_N_unkown(M = 10, m = 5, conf_level = 0.95, max_N = 60, 
                                procedure = "BK")
```
