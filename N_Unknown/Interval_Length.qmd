---
title: "Interval Length (N Unknown)"
author: "Rachel Roggenkemper"
format: html
editor: visual
---

```{r}
library(extraDistr)
library(tidyverse)

#source('../functions.R', encoding = 'UTF-8')
source('../functions_vec.R', encoding = 'UTF-8')
```

# Expected Length Function

```{r}
# expected_length_N_unknown <- function(data_frame, 
#                                       lb_col_name, 
#                                       ub_col_name, 
#                                       M,  # fixed M
#                                       m,  # fixed m
#                                       N_max  # largest N value you want to calculate
#                                       ) {
#   # Create an empty data frame to store results
#   results <- data.frame(N = integer(), ExpectedLength = numeric())
#   
#   # Loop through each N value from M to N_max
#   for (current_N in M:N_max) {
#     sum_expected_length <- 0
#     
#     # Determine the range of x values to consider
#     x_max <- min(max(data_frame$x), current_N - M)
#     
#     for (xi in 0:x_max) {
#       # Calculate the interval length for this x
#       length <- data_frame[[ub_col_name]][data_frame$x == xi] - 
#                 data_frame[[lb_col_name]][data_frame$x == xi] + 1
#       
#       # Calculate the probability using the Negative Hypergeometric PMF
#       prob <- ngh_pmf(x = xi, N = current_N, M = M, m = m)
#       
#       # Accumulate the expected length
#       sum_expected_length <- sum_expected_length + (length * prob)
#     }
#     
#     # Store the result in the results data frame
#     results <- rbind(results, data.frame(N = current_N, ExpectedLength = sum_expected_length))
#   }
#   
#   return(results)
# }
```

```{r}
#| label: optimized version of above 

expected_length_N_unknown <- function(data_frame, 
                                      lb_col_name, 
                                      ub_col_name, 
                                      M,  # fixed M
                                      m,  # fixed m
                                      N_max  # largest N value you want to calculate
) {
  # 1) Extract x from the data_frame and ensure it's unique + sorted 
  #    (assuming data_frame has one row per x)
  df_small <- data_frame[, c("x", lb_col_name, ub_col_name)]
  df_small <- df_small[order(df_small$x), ]
  
  # 2) Precompute the interval lengths for each x.
  #    length(x) = ub - lb + 1
  lengths_vec <- df_small[[ub_col_name]] - df_small[[lb_col_name]] + 1
  
  # 3) We'll iterate over N from M to N_max, computing expected length.
  N_values <- seq.int(M, N_max)
  
  # Pre-allocate a numeric vector for storing expected length for each N.
  exp_len_vec <- numeric(length(N_values))
  
  # 4) For each N, figure out the max x we can use:
  #    x_max = min(max(df_small$x), N - M)
  #    Then sum over x in [0, x_max] of (lengths[x] * ngh_pmf(x, N, M, m)).
  max_x_all <- max(df_small$x)
  
  for (i in seq_along(N_values)) {
    current_N <- N_values[i]
    
    # Determine x_max for current N
    x_max <- min(max_x_all, current_N - M)
    if (x_max < 0) {
      # If x_max < 0, no valid x => expected length is 0
      exp_len_vec[i] <- 0
      next
    }
    
    # Identify which rows of df_small correspond to x in [0, x_max].
    # Because df_small$x is sorted, we can do a direct index.
    valid_indices <- which(df_small$x <= x_max)
    
    # Corresponding x values
    x_sub <- df_small$x[valid_indices]
    # Corresponding lengths
    lengths_sub <- lengths_vec[valid_indices]
    
    # Compute PMF for each x_sub
    pmf_vec <- sapply(x_sub, function(xx) {
      ngh_pmf(x = xx, N = current_N, M = M, m = m)
    })
    
    # Sum up length * pmf
    exp_len_vec[i] <- sum(lengths_sub * pmf_vec)
  }
  
  # 5) Build the final results data frame
  results <- data.frame(
    N = N_values,
    ExpectedLength = exp_len_vec
  )
  
  return(results)
}

```

```{r}
# test <- minimal_cardinality_ci_N_unkown_vec(M = 10, m = 5, conf_level = 0.95, max_N = 100, 
#                                 procedure = "CG")
# 
# ex_length <- expected_length_N_unknown(data_frame = test, 
#                                       lb_col_name = "ci_lb", 
#                                       ub_col_name = "ci_ub", 
#                                       M = 10,  # fixed M
#                                       m = 5,  # fixed m
#                                       N_max = 20  # largest N value you want to calculate
#                                       )
# ex_length
```

# Average Length Function

```{r}
average_length <- function(data_frame, lb_col_name, ub_col_name) {
  length = data_frame[[ub_col_name]] - data_frame[[lb_col_name]] + 1
  average_length = mean(length)
  return(average_length)
}
```

# Note: Minimal Cardinality Procedures

The average length is the same for the minimal cardinality procedures. This is because they are choosing choosing between acceptance sets of minimal cardinality (so the same minimal length). The only difference is between which minimal cardinality sets are being chosen, but the length of them is the same since they are minimal cardinality. Thus, the average length is the same for the minimal cardinality procedures.

Therefore, Modified Sterne (MST) is considered superior because they all have the same average length, but MST chooses the acceptance sets with the highest coverage probability, so with the same length as the other minimal cardinality procedures, MST is getting the most coverage.

# Plots of Expected and Average Length

## Plot of Expected Length

### Data Preparation

```{r}

```

### Plot

```{r}

```

## Plot of Average Length and Average Coverage Probability

### Data Preparation

Note: Got max_N by plugging in M, m, and conf_level to get confidence intervals and keep increasing max_N til I get intervals for x: 0 to 25 and make sure max_N big enough so coverage_prob_ACP_N_unknown_vec() output isn't NA (plug in largest N_value to test).

#### Analog to Clopper Pearson

##### M = 25, m = 5

```{r}
#| eval: false

M = 25
m = 5
conf_level = 0.95
max_N = 425
N_values = M:200
```

```{r}
#| eval: false

Sys.time()

CI <- CI_Analog_CP_N_Unknown_vec(M = M, m = m, conf_level = conf_level, max_N = max_N) %>%
  filter(x <= 25)

average_length(data_frame = CI, lb_col_name = "lower_bound", ub_col_name = "upper_bound")

Sys.time()
```

```{r}
#| eval: false

Sys.time()

coverage_df = do.call(rbind, lapply(N_values, function(N) coverage_prob_ACP_N_unknown_vec(M, N, m, conf_level, max_N)))
mean(coverage_df$coverage_prob)

Sys.time()
```

##### M = 25, m = 15

```{r}
#| eval: false

M = 25
m = 15
conf_level = 0.95
max_N = 205
N_values = M:200
```

```{r}
#| eval: false

Sys.time()

CI <- CI_Analog_CP_N_Unknown_vec(M = M, m = m, conf_level = conf_level, max_N = max_N) %>%
  filter(x <= 25)

average_length(data_frame = CI, lb_col_name = "lower_bound", ub_col_name = "upper_bound")

Sys.time()
```

```{r}
#| eval: false

Sys.time()

coverage_df = do.call(rbind, lapply(N_values, function(N) coverage_prob_ACP_N_unknown_vec(M, N, m, conf_level, max_N)))
mean(coverage_df$coverage_prob)

Sys.time()
```

##### M = 50, m = 5

```{r}
#| eval: false

M = 50
m = 5
conf_level = 0.95
max_N = 870
N_values = M:200
```

```{r}
#| eval: false

Sys.time()

CI <- CI_Analog_CP_N_Unknown_vec(M = M, m = m, conf_level = conf_level, max_N = max_N) %>%
  filter(x <= 25)

average_length(data_frame = CI, lb_col_name = "lower_bound", ub_col_name = "upper_bound")

Sys.time()
```

```{r}
#| eval: false

Sys.time()

coverage_df = do.call(rbind, lapply(N_values, function(N) coverage_prob_ACP_N_unknown_vec(M, N, m, conf_level, max_N)))
mean(coverage_df$coverage_prob)

Sys.time()
```

##### M = 50, m = 15

```{r}
#| eval: false

M = 50
m = 15
conf_level = 0.95
max_N = 210
N_values = M:200
```

```{r}
#| eval: false

Sys.time()

CI <- CI_Analog_CP_N_Unknown_vec(M = M, m = m, conf_level = conf_level, max_N = max_N) %>%
  filter(x <= 25)

average_length(data_frame = CI, lb_col_name = "lower_bound", ub_col_name = "upper_bound")

Sys.time()
```

```{r}
#| eval: false

Sys.time()

coverage_df = do.call(rbind, lapply(N_values, function(N) coverage_prob_ACP_N_unknown_vec(M, N, m, conf_level, max_N)))
mean(coverage_df$coverage_prob)

Sys.time()
```

#### MST

##### M = 25, m = 5

```{r}
#| eval: true

M = 25
m = 5
conf_level = 0.95
max_N = 425
N_values = M:200
```

```{r}
#| eval: true

Sys.time()

CI <- minimal_cardinality_ci_N_unkown_vec(M = M, m = m, conf_level = conf_level, 
                                          max_N = max_N, procedure = "MST") %>%
  filter(x <= 25)

average_length(data_frame = CI, lb_col_name = "ci_lb", ub_col_name = "ci_ub")

Sys.time()
```

```{r}
#| eval: true

Sys.time()

coverage_df = do.call(rbind, lapply(N_values, function(N) mst_ac_N_unknown_vec(M, N, m, conf_level, max_N)))
mean(coverage_df$coverage_prob)

Sys.time()
```

##### M = 25, m = 15

```{r}
#| eval: true

M = 25
m = 15
conf_level = 0.95
max_N = 205
N_values = M:200
```

```{r}
#| eval: true

Sys.time()

CI <- CI_Analog_CP_N_Unknown_vec(M = M, m = m, conf_level = conf_level, max_N = max_N) %>%
  filter(x <= 25)

average_length(data_frame = CI, lb_col_name = "lower_bound", ub_col_name = "upper_bound")

Sys.time()
```

```{r}
#| eval: true

Sys.time()

coverage_df = do.call(rbind, lapply(N_values, function(N) coverage_prob_ACP_N_unknown_vec(M, N, m, conf_level, max_N)))
mean(coverage_df$coverage_prob)

Sys.time()
```

##### M = 50, m = 5

```{r}
#| eval: true

M = 50
m = 5
conf_level = 0.95
max_N = 870
N_values = M:200
```

```{r}
#| eval: true

Sys.time()

CI <- CI_Analog_CP_N_Unknown_vec(M = M, m = m, conf_level = conf_level, max_N = max_N) %>%
  filter(x <= 25)

average_length(data_frame = CI, lb_col_name = "lower_bound", ub_col_name = "upper_bound")

Sys.time()
```

```{r}
#| eval: true

Sys.time()

coverage_df = do.call(rbind, lapply(N_values, function(N) coverage_prob_ACP_N_unknown_vec(M, N, m, conf_level, max_N)))
mean(coverage_df$coverage_prob)

Sys.time()
```

##### M = 50, m = 15

```{r}
#| eval: true

M = 50
m = 15
conf_level = 0.95
max_N = 210
N_values = M:200
```

```{r}
#| eval: true

Sys.time()

CI <- CI_Analog_CP_N_Unknown_vec(M = M, m = m, conf_level = conf_level, max_N = max_N) %>%
  filter(x <= 25)

average_length(data_frame = CI, lb_col_name = "lower_bound", ub_col_name = "upper_bound")

Sys.time()
```

```{r}
#| eval: true

Sys.time()

coverage_df = do.call(rbind, lapply(N_values, function(N) coverage_prob_ACP_N_unknown_vec(M, N, m, conf_level, max_N)))
mean(coverage_df$coverage_prob)

Sys.time()
```

#### CG

#### BK

#### Blaker

##### M = 25, m = 5

```{r}
#| eval: false

M = 25
m = 5
conf_level = 0.95
max_N = 425
N_values = M:200
```

```{r}
#| eval: false

Sys.time()

CI <- blaker_ci_N_unkown_vec(M = M, m = m, conf_level = conf_level, 
                             max_N = max_N) %>%
  filter(x <= 25)

average_length(data_frame = CI, lb_col_name = "ci_lb", ub_col_name = "ci_ub")

Sys.time()
```

```{r}
#| eval: false

Sys.time()

blaker_ac_N_unkown_vec(M = M, m = m, conf_level = conf_level, max_N = max_N) %>%
  filter(N <= 200) %>%
  summarize(avg_coverage = mean(coverage_prob, na.rm = TRUE))

Sys.time()
```

##### M = 25, m = 15

```{r}
#| eval: false

M = 25
m = 15
conf_level = 0.95
max_N = 205
N_values = M:200
```

```{r}
#| eval: false

Sys.time()

CI <- blaker_ci_N_unkown_vec(M = M, m = m, conf_level = conf_level, 
                             max_N = max_N) %>%
  filter(x <= 25)

average_length(data_frame = CI, lb_col_name = "ci_lb", ub_col_name = "ci_ub")

Sys.time()
```

```{r}
#| eval: false

Sys.time()

blaker_ac_N_unkown_vec(M = M, m = m, conf_level = conf_level, max_N = max_N) %>%
  filter(N <= 200) %>%
  summarize(avg_coverage = mean(coverage_prob, na.rm = TRUE))

Sys.time()
```

##### M = 50, m = 5

```{r}
#| eval: false

M = 50
m = 5
conf_level = 0.95
max_N = 870
N_values = M:200
```

```{r}
#| eval: false

Sys.time()

CI <- blaker_ci_N_unkown_vec(M = M, m = m, conf_level = conf_level, 
                             max_N = max_N) %>%
  filter(x <= 25)

average_length(data_frame = CI, lb_col_name = "ci_lb", ub_col_name = "ci_ub")

Sys.time()
```

```{r}
#| eval: false

Sys.time()

blaker_ac_N_unkown_vec(M = M, m = m, conf_level = conf_level, max_N = max_N) %>%
  filter(N <= 200) %>%
  summarize(avg_coverage = mean(coverage_prob, na.rm = TRUE))

Sys.time()
```

##### M = 50, m = 15

```{r}
#| eval: false

M = 50
m = 15
conf_level = 0.95
max_N = 210
N_values = M:200
```

```{r}
#| eval: false

Sys.time()

CI <- blaker_ci_N_unkown_vec(M = M, m = m, conf_level = conf_level, 
                             max_N = max_N) %>%
  filter(x <= 25)

average_length(data_frame = CI, lb_col_name = "ci_lb", ub_col_name = "ci_ub")

Sys.time()
```

```{r}
#| eval: false

Sys.time()

blaker_ac_N_unkown_vec(M = M, m = m, conf_level = conf_level, max_N = max_N) %>%
  filter(N <= 200) %>%
  summarize(avg_coverage = mean(coverage_prob, na.rm = TRUE))

Sys.time()
```

#### CMC

### Plot

```{r}

```

M = 25, m = 5

-   x: 0 to 25

-   N: 25 to 200

M = 25, m = 15

-   x: 0 to 25

-   N: 25 to 200

M = 50, m = 5

-   x: 0 to 25

-   N: 50 to 200

M = 50, m = 15

-   x: 0 to 25

-   N: 50 to 200

```{r}
minimal_cardinality_ci_N_unkown_vec(M = 25, m = 5, conf_level = 0.95, 
                                          max_N = 500, procedure = "MST")

#cmc_ac_N_unknown_vec(M = 25, m = 5, conf_level = 0.95, max_N = 50)
```

```{r}
mst_ac_N_unknown_vec(M = 25, m = 5, conf_level = 0.95, max_N = 500)

#cmc_ci_N_unkown_vec(M = 25, m = 5, conf_level = 0.95, max_N = 425)
```
