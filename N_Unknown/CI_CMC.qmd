---
title: "Conditional Minimal Cardinality (CMC) (N Unknown)"
author: "Rachel Roggenkemper"
format: html
editor: visual
---

```{r}
library(extraDistr)
library(tidyverse)

source('../functions.R', encoding = 'UTF-8')
```

## Acceptance Curves (Function)

```{r}
cmc_ac_N_unknown <- function(M, m, conf_level = 0.95, max_N = 250) {
  # Initializing the data frame that the function will output 
  results = data.frame(N = integer(), 
                       a = integer(), 
                       b = integer(), 
                       cardinality = integer(), 
                       coverage_prob = numeric())
  
  # Setting the initial min_a and min_b, always starts with 0-0
  min_a = 0
  min_b = 0
  max_x = max_N - M
  
  for (N in M:max_N) {
    # Initializing a data frame that temporarily stores results
    temp_results = data.frame(N = integer(), 
                              a = integer(), 
                              b = integer(), 
                              cardinality = integer(), 
                              coverage_prob = numeric())
    
    # Find all possible acceptance curves that have non-decreasing a and b
    
    # Loops through the a first, making sure it only starts at min_a so that a is 
    # non-decreasing, stops at a max_x
    for (a in min_a:max_x) {
      # Loops through b: starting at the max of a and min_b to make sure that b >= a and 
      # so that b is non-decreasing, stops at max_x
      for (b in max(a, min_b):max_x) {
        # Calculates coverage probability, cardinality, and stores it in data frame
        coverage_prob = sum_ngh_pmf(N, M, m, a, b)
        cardinality = b - a + 1
        temp_results = rbind(temp_results, data.frame(N = N, 
                                                      a = a, 
                                                      b = b, 
                                                      cardinality = cardinality, 
                                                      coverage_prob = coverage_prob))
      }
    }


    # Filter out the sets with the coverage probability >= conf_level
    # For each N, filters out to choose the acceptance curve with the highest a and the 
    # lowest b (which is the same as the one with the lowest coverage prob that is still
    # above the confidence level)
    temp_results = temp_results %>%
      filter(coverage_prob >= conf_level) %>%
      group_by(N) %>%
      filter(a == max(a)) %>%
      filter(b == min(b)) %>%
      ungroup()

    # Updates min_a and min_b for each iteration
    if (nrow(temp_results) > 0) {
      min_a = max(min_a, min(temp_results$a))
      min_b = max(min_b, min(temp_results$b))
    }
    results = rbind(results, temp_results)
  }

  # Arranges data by N
  filtered_results = results %>%
    arrange(N)

  # Adds a column of the x set
  filtered_results = filtered_results %>%
    mutate(x_set = paste(a, b, sep = "-"))

  return(filtered_results)
    
}
```

```{r}
cmc_ac_N_unknown(M = 10, m = 5, conf_level = 0.95, max_N = 40)
```

## Confidence Intervals Bounds (Function)

```{r}
cmc_ci_N_unkown <- function(M, m, conf_level = 0.95, max_N = 250, procedure = "MST") {
  results = cmc_ac_N_unknown(M, m, conf_level, max_N)
  
  # Initializes data frame that will be outputted 
  ci_results = data.frame(x = integer(), 
                          ci_lb = integer(), 
                          ci_ub = integer(), 
                          ci = character(),
                          stringsAsFactors = FALSE)
  
  # Find the second-highest "a"
  unique_a_values <- sort(unique(results$a), decreasing = TRUE)
  if (length(unique_a_values) > 1) {
    max_x <- unique_a_values[2]  # Second-highest value
  } else {
    max_x <- unique_a_values[1]  # Fallback if only one value exists
  }
  
  # Loops through each x 
  for (x in 0:max_x) {
    # Finds first interval where x appears 
    first_occurrence = results %>% 
      filter(a <= x, x <= b) %>% 
      slice(1)
    
    # Finds last interval where x appears 
    last_occurrence = results %>% 
      filter(a <= x, x <= b) %>% 
      slice(n())
    
    # Finds the N of the corresponding above intervals and saves those as the CI bounds
    if (nrow(first_occurrence) > 0 && nrow(last_occurrence) > 0) {
      ci_lb = first_occurrence$N
      ci_ub = last_occurrence$N
      ci = paste0("[", ci_lb, ", ", ci_ub, "]")
      
      ci_results = rbind(ci_results, data.frame(x = x, 
                                                ci_lb = ci_lb, 
                                                ci_ub = ci_ub, 
                                                ci = ci))
    }
  }
  
  return(ci_results)
}
```

```{r}
cmc_ci_N_unkown(M = 10, m = 5, conf_level = 0.95, max_N = 60)
```
