---
title: "NHG CI (N Unknown): m = 1"
author: "Rachel Roggenkemper"
format: html
editor: visual
---

# Set-Up

```{r}
#| message: false

library(extraDistr)
library(tidyverse)
library(data.table)

source('../functions.R', encoding = 'UTF-8')
source('../functions_vec.R', encoding = 'UTF-8')
```

```{r}
all_ac_N_unknown_vec_editted <- function(M, m, conf_level = 0.95, max_N = 1000) {
  # Loop over each N from M to max_N, building a data.table for each N
  results_list <- lapply(seq.int(M, max_N), function(N_val) {
    max_x <- N_val - M
    # If max_x is negative, skip (should not happen because N_val >= M)
    if(max_x < 0) return(NULL)
    
    # Create a grid of (a, b) pairs with 0 <= a <= b <= max_x.
    # CJ() creates the complete join (all combinations) and sorts by default.
    grid <- CJ(a = 0:max_x, b = 0:max_x)[b >= a]
    
    # Compute the coverage probability for each (a, b) pair.
    # (If sum_ngh_pmf can be vectorized over a and b, you could replace mapply with a direct call.)
    grid[, coverage_prob := mapply(function(a, b) sum_ngh_pmf(N_val, M, m, a, b), a, b)]
    grid[, cardinality := b - a + 1]
    grid[, N := N_val]
    
    # Filter rows based on the coverage criteria
    #grid <- grid[coverage_prob >= conf_level & coverage_prob <= 1 & coverage_prob >= 0]
    grid <- grid[coverage_prob <= 1 & coverage_prob >= 0]
    
    # If no rows pass the filter, return NULL so nothing is added.
    if (nrow(grid) == 0) return(NULL)
    
    return(grid)
  })
  
  # Combine the results from all N values
  combined <- rbindlist(results_list, use.names = TRUE, fill = TRUE)
  
  # If no valid rows were found, return an empty data frame with the expected structure.
  if (nrow(combined) == 0) {
    return(data.frame(
      N = integer(),
      a = integer(),
      b = integer(),
      cardinality = integer(),
      coverage_prob = numeric(),
      x_set = character(),
      stringsAsFactors = FALSE
    ))
  }
  
  # Add the x_set column exactly as before.
  combined[, x_set := paste(a, b, sep = "-")]
  
  # Reorder the columns to match the original order: N, a, b, cardinality, coverage_prob, x_set
  setcolorder(combined, c("N", "a", "b", "cardinality", "coverage_prob", "x_set"))
  
  # Return as a data.frame to preserve the original output type.
  return(as.data.frame(combined))
}
```

# Discoveries (N unknown: m = 1)

-   For the 3 minimal cardinality methods (CG, MST, and BK), all seem to not have an upper bound when m = 1 (in the acceptance curves, 0 is always included)

-   For the 3 minimal cardinality methods, the acceptance curves are identical no matter the M or confidence level

# All Acceptance Curves

```{r}
Sys.time()
ac <- all_ac_N_unknown_vec_editted(M = 10, m = 1, conf_level = 0.80, max_N = 100)
Sys.time()
```

```{r}
# For M = 10, m = 1, conf_level = 0.80 case
# CMC and CG/BK/MST acceptance curves are the same up from N = 1 to 49
# Starts to differ at N = 50

filter_ac <- ac %>%
  filter(N == 50) %>%
  filter(coverage_prob >= 0.80) %>%
  filter(a >= 0) %>%
  filter(b >= 6)
filter_ac
```

## Plot

```{r}
ac %>%
  filter(N >= 50) %>%
  filter(a < 3) %>%
  filter(cardinality <= 42) %>%
  mutate(a = factor(a)) %>%
  ggplot() +
  geom_line(aes(x = N, 
                y = coverage_prob, 
                group = x_set, 
                color = a)) +
  scale_color_manual(
  values = c("0" = "#F8766D", "1" = "#00BA38", "2" = "#619CFF"), 
  labels = c("0" = "RB(0)", "1" = "RB(1)", "2" = "RB(2)")) +
  labs(x = "N", y = "Coverage Probability", color = NULL) +
  geom_hline(yintercept = 0.80, color = "red") +
  coord_cartesian(ylim = c(0.80 - 0.005, 1)) +
  scale_y_continuous(breaks = c(0.80, 1)) +
  theme_minimal() +
  theme(
    #legend.position = "none", 
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_rect(color = "black", fill = NA, size = 1),
    axis.ticks = element_line(size = 0.5),
    axis.ticks.length = unit(2, "mm"),
    axis.text.x = element_text(margin = margin(t = 5)),
    axis.text.y = element_text(margin = margin(r = 5)))
```

# CG!

```{r}
Sys.time()
cg_ac <- cg_ac_N_unknown_direct(M = 10, m = 1, conf_level = 0.80, max_N = 500)
Sys.time()
```

```{r}
Sys.time()
minimal_cardinality_ci_N_unkown_vec(M = 10, m = 1, conf_level = 0.80, max_N = 500, 
                                    procedure = "CG")
Sys.time()
```

```{r}
ac$a <- factor(ac$a)
ac %>%
  filter(x_set %in% unique(cg_ac$x_set)) %>%
  ggplot() +
  geom_line(aes(x = N, 
                y = coverage_prob, 
                group = x_set)) +
  labs(x = "N", y = "Coverage Probability") +
  geom_hline(yintercept = 0.80, color = "red") +
  coord_cartesian(ylim = c(0.80 - 0.005, 1)) +
  scale_y_continuous(breaks = c(0.80, 1)) +
  theme_minimal() +
  theme(
    #legend.position = "none", 
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_rect(color = "black", fill = NA, size = 1),
    axis.ticks = element_line(size = 0.5),
    axis.ticks.length = unit(2, "mm"),
    axis.text.x = element_text(margin = margin(t = 5)),
    axis.text.y = element_text(margin = margin(r = 5)))
```

# MST!

```{r}
Sys.time()
mst_ac <- mst_ac_N_unknown_direct(M = 10, m = 1, conf_level = 0.80, max_N = 500)
Sys.time()
```

```{r}
Sys.time()
minimal_cardinality_ci_N_unkown_vec(M = 10, m = 1, conf_level = 0.80, max_N = 500, 
                                    procedure = "MST")
Sys.time()
```

# BK!

```{r}
Sys.time()
bk_ac <- bk_ac_N_unknown_direct(M = 10, m = 1, conf_level = 0.80, max_N = 500)
Sys.time()
```

```{r}
Sys.time()
minimal_cardinality_ci_N_unkown_vec(M = 10, m = 1, conf_level = 0.80, max_N = 500, 
                                    procedure = "BK")
Sys.time()
```

# CMC

```{r}
Sys.time()
cmc_ac <- cmc_ac_N_unknown_vec(M = 10, m = 1, conf_level = 0.80, max_N = 200)
Sys.time()
```

```{r}
Sys.time()
cmc_ci_N_unkown_vec(M = 10, m = 1, conf_level = 0.80, max_N = 200)
Sys.time()
```

# Blaker

```{r}
Sys.time()
blaker_ci_N_unkown_vec(M = 10, m = 1, conf_level = 0.80, max_N = 200)
Sys.time()
```

# Analog to Clopper-Pearson

```{r}
Sys.time()
CI_Analog_CP_N_Unknown_vec(M = 10, m = 1, conf_level = 0.80, max_N = 200)
Sys.time()
```
