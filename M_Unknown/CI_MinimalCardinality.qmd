---
title: "NHG Confidence Intervals for M: Minimal Cardinality Procedures"
author: "Rachel Roggenkemper"
format: html
editor: visual
---

```{r, warning=FALSE}
library(extraDistr)
library(tidyverse)
```

```{r}
# ngh_pmf <- function(x, N, M, m) {
#   # m = # total successes (unknown) - (our notation: M)
#   m_pmf = M  
#   
#   # n = # total failures - (our notation: X = N - M)
#   n_pmf = N - m_pmf 
#   
#   # r = # fixed successes (our notation: m)
#   r_pmf = m   
#   
#   # x = # balls being drawn (our notation: n = m + x) 
#   x_pmf = r_pmf + x
#   
#   return(dnhyper(x = x_pmf, m = m_pmf, n = n_pmf, r = r_pmf))
# }


ngh_pmf <- function(x, N, M, m) {
  numerator = choose(m + x - 1, m - 1) * choose(N - m - x, M - m)
  denominator = choose(N, M)
  result = numerator / denominator
  return(result)
}

# Original (top): ngh_pmf(x = 0, N = 50, M = 50, m = 3) -> R crashes (end points doesn't work for coverage prob)
# New (bottom): ngh_pmf(x = 0, N = 50, M = 50, m = 3) -> 1
```

```{r}
ngh_cdf <- function(x, N, M, m, lower_tail = TRUE) {
  # m = # total successes (unknown) - (our notation: M)
  m_pmf = M  
  
  # n = # total failures - (our notation: X = N - M)
  n_pmf = N - m_pmf 
  
  # r = # fixed successes (our notation: m)
  r_pmf = m   
  
  # x = # balls being drawn (our notation: n = m + x) 
  x_pmf = r_pmf + x
  
  return(pnhyper(q = x_pmf, m = m_pmf, n = n_pmf, r = r_pmf, lower.tail = lower_tail))
}
```

# Minimal Cardinality Acceptance Curves

```{r}
# Function that sums the ngh_pmf based on a min_x and max_x
sum_ngh_pmf <- function(N, M, m, min_x, max_x) {
  sum_pmf = 0
  for (x in min_x:max_x) {
    sum_pmf = sum_pmf + ngh_pmf(x, N, M, m)
  }
  return(sum_pmf)
}
```

## N = 50, m = 3, Confidence Level = 0.95

### M = 50

-\> 0-0 with CP = 1

```{r}
sum_ngh_pmf(N = 50, M = 50, m = 3, min_x = 0, max_x = 0)
sum_ngh_pmf(N = 50, M = 50, m = 3, min_x = 1, max_x = 1)

sum_ngh_pmf(N = 50, M = 50, m = 3, min_x = 0, max_x = 1)
```

### M = 49

-\> 0-1 with CP = 1

```{r}
sum_ngh_pmf(N = 50, M = 49, m = 3, min_x = 0, max_x = 0)
sum_ngh_pmf(N = 50, M = 49, m = 3, min_x = 1, max_x = 1)

sum_ngh_pmf(N = 50, M = 49, m = 3, min_x = 0, max_x = 1)

sum_ngh_pmf(N = 50, M = 49, m = 3, min_x = 0, max_x = 2)
```

### M = 48

-\> 0-1 with CP = 0.9951021

```{r}
sum_ngh_pmf(N = 50, M = 48, m = 3, min_x = 0, max_x = 1)
sum_ngh_pmf(N = 50, M = 48, m = 3, min_x = 1, max_x = 2)
```

### M = 47

-\> 0-1 with CP = 0.9857143

```{r}
sum_ngh_pmf(N = 50, M = 47, m = 3, min_x = 0, max_x = 1)
sum_ngh_pmf(N = 50, M = 47, m = 3, min_x = 1, max_x = 2)
```

### M = 46:

-\> 0-1 with CP = 0.9722319

```{r}
sum_ngh_pmf(N = 50, M = 46, m = 3, min_x = 0, max_x = 1)
sum_ngh_pmf(N = 50, M = 46, m = 3, min_x = 1, max_x = 2)
```

### M = 45

-\> 0-1 with CP = 0.9550369

```{r}
sum_ngh_pmf(N = 50, M = 45, m = 3, min_x = 0, max_x = 1)
sum_ngh_pmf(N = 50, M = 45, m = 3, min_x = 1, max_x = 2)
```

### M = 44

-\> 0-2 with CP = 0.9907559

```{r}
sum_ngh_pmf(N = 50, M = 44, m = 3, min_x = 0, max_x = 1)
sum_ngh_pmf(N = 50, M = 44, m = 3, min_x = 1, max_x = 2)

sum_ngh_pmf(N = 50, M = 44, m = 3, min_x = 0, max_x = 2)
sum_ngh_pmf(N = 50, M = 44, m = 3, min_x = 1, max_x = 3)
```

### M = 43

-\> 0-2 with CP = 0.9843631

```{r}
sum_ngh_pmf(N = 50, M = 43, m = 3, min_x = 0, max_x = 2)
sum_ngh_pmf(N = 50, M = 43, m = 3, min_x = 1, max_x = 3)
```

### M = 42

-\> 0-2 with CP = 0.9758292

```{r}
sum_ngh_pmf(N = 50, M = 42, m = 3, min_x = 0, max_x = 2)
sum_ngh_pmf(N = 50, M = 42, m = 3, min_x = 1, max_x = 3)
```

### M = 41

-\> 0-2 with CP = 0.9649928

```{r}
sum_ngh_pmf(N = 50, M = 41, m = 3, min_x = 0, max_x = 2)
sum_ngh_pmf(N = 50, M = 41, m = 3, min_x = 1, max_x = 3)
```

### M = 40

-\> 0-2 with CP = 0.9517396

```{r}
sum_ngh_pmf(N = 50, M = 40, m = 3, min_x = 0, max_x = 2)
sum_ngh_pmf(N = 50, M = 40, m = 3, min_x = 1, max_x = 3)
```

### M = 39

-\> 0-3 with CP = 0.9834488

```{r}
sum_ngh_pmf(N = 50, M = 39, m = 3, min_x = 0, max_x = 2)
sum_ngh_pmf(N = 50, M = 39, m = 3, min_x = 1, max_x = 3)

sum_ngh_pmf(N = 50, M = 39, m = 3, min_x = 0, max_x = 3)
sum_ngh_pmf(N = 50, M = 39, m = 3, min_x = 1, max_x = 4)
```

### M = 38

-\> 0-3 with CP = 0.9761493

```{r}
sum_ngh_pmf(N = 50, M = 38, m = 3, min_x = 0, max_x = 3)
sum_ngh_pmf(N = 50, M = 38, m = 3, min_x = 1, max_x = 4)
```

### M = 37

-\> 0-3 with CP = 0.9669288

```{r}
sum_ngh_pmf(N = 50, M = 37, m = 3, min_x = 0, max_x = 3)
sum_ngh_pmf(N = 50, M = 37, m = 3, min_x = 1, max_x = 4)
```

### M = 36

-\> 0-3 with CP = 0.9555901

```{r}
sum_ngh_pmf(N = 50, M = 36, m = 3, min_x = 0, max_x = 3)
sum_ngh_pmf(N = 50, M = 36, m = 3, min_x = 1, max_x = 4)
```

### M = 35

-\> 0-4 with CP = 0.9802933

```{r}
sum_ngh_pmf(N = 50, M = 35, m = 3, min_x = 0, max_x = 3)
sum_ngh_pmf(N = 50, M = 35, m = 3, min_x = 1, max_x = 4)

sum_ngh_pmf(N = 50, M = 35, m = 3, min_x = 0, max_x = 4)
sum_ngh_pmf(N = 50, M = 35, m = 3, min_x = 1, max_x = 5)
```

### M = 34

-\> 0-4 with CP = 0.9726268

```{r}
sum_ngh_pmf(N = 50, M = 34, m = 3, min_x = 0, max_x = 4)
sum_ngh_pmf(N = 50, M = 34, m = 3, min_x = 1, max_x = 5)
```

### M = 33

-\> 0-4 with CP = 0.963006

```{r}
sum_ngh_pmf(N = 50, M = 33, m = 3, min_x = 0, max_x = 4)
sum_ngh_pmf(N = 50, M = 33, m = 3, min_x = 1, max_x = 5)
```

### M = 32

-\> 0-4 with CP = 0.9511876

```{r}
sum_ngh_pmf(N = 50, M = 32, m = 3, min_x = 0, max_x = 4)
sum_ngh_pmf(N = 50, M = 32, m = 3, min_x = 1, max_x = 5)
```

### M = 31

-\> 0-5 with CP = 0.9734503

```{r}
sum_ngh_pmf(N = 50, M = 31, m = 3, min_x = 0, max_x = 4)
sum_ngh_pmf(N = 50, M = 31, m = 3, min_x = 1, max_x = 5)

sum_ngh_pmf(N = 50, M = 31, m = 3, min_x = 0, max_x = 5)
sum_ngh_pmf(N = 50, M = 31, m = 3, min_x = 1, max_x = 6)
```

### M = 30

-\> 0-5 with CP = 0.9640288

```{r}
sum_ngh_pmf(N = 50, M = 30, m = 3, min_x = 0, max_x = 5)
sum_ngh_pmf(N = 50, M = 30, m = 3, min_x = 1, max_x = 6)
```

### M = 29

-\> 0-5 with CP = 0.9523043

```{r}
sum_ngh_pmf(N = 50, M = 29, m = 3, min_x = 0, max_x = 5)
sum_ngh_pmf(N = 50, M = 29, m = 3, min_x = 1, max_x = 6)
```

### M = 28

-\> 0-6 with CP = 0.9704975

```{r}
sum_ngh_pmf(N = 50, M = 28, m = 3, min_x = 0, max_x = 5)
sum_ngh_pmf(N = 50, M = 28, m = 3, min_x = 1, max_x = 6)

sum_ngh_pmf(N = 50, M = 28, m = 3, min_x = 0, max_x = 6)
sum_ngh_pmf(N = 50, M = 28, m = 3, min_x = 1, max_x = 7)
```

### M = 27

-\> 0-6 with CP = 0.9600445

```{r}
sum_ngh_pmf(N = 50, M = 27, m = 3, min_x = 0, max_x = 6)
sum_ngh_pmf(N = 50, M = 27, m = 3, min_x = 1, max_x = 7)
```

### M = 26

-\> 0-7 with CP = 0.9732304

```{r}
sum_ngh_pmf(N = 50, M = 26, m = 3, min_x = 0, max_x = 6)
sum_ngh_pmf(N = 50, M = 26, m = 3, min_x = 1, max_x = 7)

sum_ngh_pmf(N = 50, M = 26, m = 3, min_x = 0, max_x = 7)
sum_ngh_pmf(N = 50, M = 26, m = 3, min_x = 1, max_x = 8)
```

### M = 25

-\> 0-7 with CP = 0.9631225

```{r}
sum_ngh_pmf(N = 50, M = 25, m = 3, min_x = 0, max_x = 7)
sum_ngh_pmf(N = 50, M = 25, m = 3, min_x = 1, max_x = 8)
```

### M = 24

-\> 0-7 with CP = 0.9502069

```{r}
sum_ngh_pmf(N = 50, M = 24, m = 3, min_x = 0, max_x = 7)
sum_ngh_pmf(N = 50, M = 24, m = 3, min_x = 1, max_x = 8)
```

### M = 23

-\> 0-8 with CP = 0.9627122

```{r}
sum_ngh_pmf(N = 50, M = 23, m = 3, min_x = 0, max_x = 7)
sum_ngh_pmf(N = 50, M = 23, m = 3, min_x = 1, max_x = 8)

sum_ngh_pmf(N = 50, M = 23, m = 3, min_x = 0, max_x = 8)
sum_ngh_pmf(N = 50, M = 23, m = 3, min_x = 1, max_x = 9)
```

### M = 22

-\> 0-9 with CP = 0.9708871

```{r}
sum_ngh_pmf(N = 50, M = 22, m = 3, min_x = 0, max_x = 8)
sum_ngh_pmf(N = 50, M = 22, m = 3, min_x = 1, max_x = 9)

sum_ngh_pmf(N = 50, M = 22, m = 3, min_x = 0, max_x = 9)
sum_ngh_pmf(N = 50, M = 22, m = 3, min_x = 1, max_x = 10)
```

### M = 21

-\> 0-9 with CP = 0.9589394

```{r}
sum_ngh_pmf(N = 50, M = 21, m = 3, min_x = 0, max_x = 9)
sum_ngh_pmf(N = 50, M = 21, m = 3, min_x = 1, max_x = 10)
```

### M = 20

-\> 0-10 with CP = 0.9655391

```{r}
sum_ngh_pmf(N = 50, M = 20, m = 3, min_x = 0, max_x = 9)
sum_ngh_pmf(N = 50, M = 20, m = 3, min_x = 1, max_x = 10)

sum_ngh_pmf(N = 50, M = 20, m = 3, min_x = 0, max_x = 10)
sum_ngh_pmf(N = 50, M = 20, m = 3, min_x = 1, max_x = 11)
```

### M = 19

-\> 0-10 with CP = 0.951061

```{r}
sum_ngh_pmf(N = 50, M = 19, m = 3, min_x = 0, max_x = 10)
sum_ngh_pmf(N = 50, M = 19, m = 3, min_x = 1, max_x = 11)
```

### M = 18

-\> 0-11 with CP = 0.9559944

```{r}
sum_ngh_pmf(N = 50, M = 18, m = 3, min_x = 0, max_x = 10)
sum_ngh_pmf(N = 50, M = 18, m = 3, min_x = 1, max_x = 11)

sum_ngh_pmf(N = 50, M = 18, m = 3, min_x = 0, max_x = 11)
sum_ngh_pmf(N = 50, M = 18, m = 3, min_x = 1, max_x = 12)
```

### M = 17

-\> 0-12 with CP = 0.958723

```{r}
sum_ngh_pmf(N = 50, M = 17, m = 3, min_x = 0, max_x = 11)
sum_ngh_pmf(N = 50, M = 17, m = 3, min_x = 1, max_x = 12)

sum_ngh_pmf(N = 50, M = 17, m = 3, min_x = 0, max_x = 12)
sum_ngh_pmf(N = 50, M = 17, m = 3, min_x = 1, max_x = 13)
```

### M = 16

-\> 0-13 with CP = 0.959596

```{r}
sum_ngh_pmf(N = 50, M = 16, m = 3, min_x = 0, max_x = 12)
sum_ngh_pmf(N = 50, M = 16, m = 3, min_x = 1, max_x = 13)

sum_ngh_pmf(N = 50, M = 16, m = 3, min_x = 0, max_x = 13)
sum_ngh_pmf(N = 50, M = 16, m = 3, min_x = 1, max_x = 14)
```

### M = 15

-\> 0-14 with CP = 0.958723

```{r}
sum_ngh_pmf(N = 50, M = 15, m = 3, min_x = 0, max_x = 13)
sum_ngh_pmf(N = 50, M = 15, m = 3, min_x = 1, max_x = 14)

sum_ngh_pmf(N = 50, M = 15, m = 3, min_x = 0, max_x = 14)
sum_ngh_pmf(N = 50, M = 15, m = 3, min_x = 1, max_x = 15)
```

### M = 14

-\> 0-15 with CP = 0.9559944

-\> 1-16 with CP = 0.9512364

```{r}
sum_ngh_pmf(N = 50, M = 14, m = 3, min_x = 0, max_x = 14)
sum_ngh_pmf(N = 50, M = 14, m = 3, min_x = 1, max_x = 15)

sum_ngh_pmf(N = 50, M = 14, m = 3, min_x = 0, max_x = 15)
sum_ngh_pmf(N = 50, M = 14, m = 3, min_x = 1, max_x = 16)
sum_ngh_pmf(N = 50, M = 14, m = 3, min_x = 2, max_x = 17)
```

### M = 13

-\> 0-16 with CP = 0.951061

-\> 1-17 with CP = 0.9509473

```{r}
sum_ngh_pmf(N = 50, M = 13, m = 3, min_x = 0, max_x = 15)
sum_ngh_pmf(N = 50, M = 13, m = 3, min_x = 1, max_x = 16)
sum_ngh_pmf(N = 50, M = 13, m = 3, min_x = 2, max_x = 17)

sum_ngh_pmf(N = 50, M = 13, m = 3, min_x = 0, max_x = 16)
sum_ngh_pmf(N = 50, M = 13, m = 3, min_x = 1, max_x = 17)
sum_ngh_pmf(N = 50, M = 13, m = 3, min_x = 2, max_x = 18)
```

### M = 12

-\> 0-18 with CP = 0.9589394

-\> 1-19 with CP = 0.9596626

```{r}
sum_ngh_pmf(N = 50, M = 12, m = 3, min_x = 0, max_x = 16)
sum_ngh_pmf(N = 50, M = 12, m = 3, min_x = 1, max_x = 17)
sum_ngh_pmf(N = 50, M = 12, m = 3, min_x = 2, max_x = 18)

sum_ngh_pmf(N = 50, M = 12, m = 3, min_x = 0, max_x = 17)
sum_ngh_pmf(N = 50, M = 12, m = 3, min_x = 1, max_x = 18)
sum_ngh_pmf(N = 50, M = 12, m = 3, min_x = 2, max_x = 19)

sum_ngh_pmf(N = 50, M = 12, m = 3, min_x = 0, max_x = 18)
sum_ngh_pmf(N = 50, M = 12, m = 3, min_x = 1, max_x = 19)
sum_ngh_pmf(N = 50, M = 12, m = 3, min_x = 2, max_x = 20)
```

### M = 11

-\> 1-20 with CP = 0.9542938

```{r}
sum_ngh_pmf(N = 50, M = 11, m = 3, min_x = 0, max_x = 18)
sum_ngh_pmf(N = 50, M = 11, m = 3, min_x = 1, max_x = 19)
sum_ngh_pmf(N = 50, M = 11, m = 3, min_x = 2, max_x = 20)

sum_ngh_pmf(N = 50, M = 11, m = 3, min_x = 0, max_x = 19)
sum_ngh_pmf(N = 50, M = 11, m = 3, min_x = 1, max_x = 20)
sum_ngh_pmf(N = 50, M = 11, m = 3, min_x = 2, max_x = 21)
```

### M = 10

-\> 1-22 with CP = 0.9570001

-\> 2-23 with CP = 0.9514762

```{r}
sum_ngh_pmf(N = 50, M = 10, m = 3, min_x = 1, max_x = 20)
sum_ngh_pmf(N = 50, M = 10, m = 3, min_x = 2, max_x = 21)

sum_ngh_pmf(N = 50, M = 10, m = 3, min_x = 1, max_x = 21)
sum_ngh_pmf(N = 50, M = 10, m = 3, min_x = 2, max_x = 22)

sum_ngh_pmf(N = 50, M = 10, m = 3, min_x = 1, max_x = 22)
sum_ngh_pmf(N = 50, M = 10, m = 3, min_x = 2, max_x = 23)
sum_ngh_pmf(N = 50, M = 10, m = 3, min_x = 3, max_x = 24)
```

### M = 9

-\> 1-24 with CP = 0.9557588

-\> 2-25 with CP = 0.954996

```{r}
sum_ngh_pmf(N = 50, M = 9, m = 3, min_x = 1, max_x = 22)
sum_ngh_pmf(N = 50, M = 9, m = 3, min_x = 2, max_x = 23)
sum_ngh_pmf(N = 50, M = 9, m = 3, min_x = 3, max_x = 24)

sum_ngh_pmf(N = 50, M = 9, m = 3, min_x = 1, max_x = 23)
sum_ngh_pmf(N = 50, M = 9, m = 3, min_x = 2, max_x = 24)
sum_ngh_pmf(N = 50, M = 9, m = 3, min_x = 3, max_x = 25)

sum_ngh_pmf(N = 50, M = 9, m = 3, min_x = 1, max_x = 24)
sum_ngh_pmf(N = 50, M = 9, m = 3, min_x = 2, max_x = 25)
sum_ngh_pmf(N = 50, M = 9, m = 3, min_x = 3, max_x = 26)
```

### M = 8

-\> 2-27 with CP = 0.9535121

```{r}
sum_ngh_pmf(N = 50, M = 8, m = 3, min_x = 1, max_x = 24)
sum_ngh_pmf(N = 50, M = 8, m = 3, min_x = 2, max_x = 25)
sum_ngh_pmf(N = 50, M = 8, m = 3, min_x = 3, max_x = 26)
sum_ngh_pmf(N = 50, M = 8, m = 3, min_x = 4, max_x = 27)

sum_ngh_pmf(N = 50, M = 8, m = 3, min_x = 1, max_x = 25)
sum_ngh_pmf(N = 50, M = 8, m = 3, min_x = 2, max_x = 26)
sum_ngh_pmf(N = 50, M = 8, m = 3, min_x = 3, max_x = 27)

sum_ngh_pmf(N = 50, M = 8, m = 3, min_x = 1, max_x = 26)
sum_ngh_pmf(N = 50, M = 8, m = 3, min_x = 2, max_x = 27)
sum_ngh_pmf(N = 50, M = 8, m = 3, min_x = 3, max_x = 28)
```

### M = 7

-\> 2-30 with CP = 0.9563191

-\> 3-31 with CP = 0.9569898

-\> 4-32 with CP = 0.9510655

```{r}
sum_ngh_pmf(N = 50, M = 7, m = 3, min_x = 2, max_x = 27)
sum_ngh_pmf(N = 50, M = 7, m = 3, min_x = 3, max_x = 28)
sum_ngh_pmf(N = 50, M = 7, m = 3, min_x = 4, max_x = 29)
sum_ngh_pmf(N = 50, M = 7, m = 3, min_x = 5, max_x = 30)

sum_ngh_pmf(N = 50, M = 7, m = 3, min_x = 2, max_x = 28)
sum_ngh_pmf(N = 50, M = 7, m = 3, min_x = 3, max_x = 29)
sum_ngh_pmf(N = 50, M = 7, m = 3, min_x = 4, max_x = 30)

sum_ngh_pmf(N = 50, M = 7, m = 3, min_x = 2, max_x = 29)
sum_ngh_pmf(N = 50, M = 7, m = 3, min_x = 3, max_x = 30)
sum_ngh_pmf(N = 50, M = 7, m = 3, min_x = 4, max_x = 31)

sum_ngh_pmf(N = 50, M = 7, m = 3, min_x = 2, max_x = 30)
sum_ngh_pmf(N = 50, M = 7, m = 3, min_x = 3, max_x = 31)
sum_ngh_pmf(N = 50, M = 7, m = 3, min_x = 4, max_x = 32)
sum_ngh_pmf(N = 50, M = 7, m = 3, min_x = 5, max_x = 33)
```

### M = 6

-\> 2-33 with CP = 0.9517038

-\> 3-34 with CP = 0.9576847

-\> 4-35 with CP = 0.9585707

-\> 5-36 with CP = 0.954221

```{r}
sum_ngh_pmf(N = 50, M = 6, m = 3, min_x = 2, max_x = 30)
sum_ngh_pmf(N = 50, M = 6, m = 3, min_x = 3, max_x = 31)
sum_ngh_pmf(N = 50, M = 6, m = 3, min_x = 4, max_x = 32)
sum_ngh_pmf(N = 50, M = 6, m = 3, min_x = 5, max_x = 33)
sum_ngh_pmf(N = 50, M = 6, m = 3, min_x = 6, max_x = 34)

sum_ngh_pmf(N = 50, M = 6, m = 3, min_x = 2, max_x = 31)
sum_ngh_pmf(N = 50, M = 6, m = 3, min_x = 3, max_x = 32)
sum_ngh_pmf(N = 50, M = 6, m = 3, min_x = 4, max_x = 33)
sum_ngh_pmf(N = 50, M = 6, m = 3, min_x = 5, max_x = 34)

sum_ngh_pmf(N = 50, M = 6, m = 3, min_x = 2, max_x = 32)
sum_ngh_pmf(N = 50, M = 6, m = 3, min_x = 3, max_x = 33)
sum_ngh_pmf(N = 50, M = 6, m = 3, min_x = 4, max_x = 34)
sum_ngh_pmf(N = 50, M = 6, m = 3, min_x = 5, max_x = 35)

sum_ngh_pmf(N = 50, M = 6, m = 3, min_x = 2, max_x = 33)
sum_ngh_pmf(N = 50, M = 6, m = 3, min_x = 3, max_x = 34)
sum_ngh_pmf(N = 50, M = 6, m = 3, min_x = 4, max_x = 35)
sum_ngh_pmf(N = 50, M = 6, m = 3, min_x = 5, max_x = 36)
sum_ngh_pmf(N = 50, M = 6, m = 3, min_x = 6, max_x = 37)
```

### M = 5

-\> 6-39 with CP = 0.9516585

```{r}
sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 2, max_x = 33)
sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 3, max_x = 34)
sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 4, max_x = 35)
sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 5, max_x = 36)
sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 6, max_x = 37)
sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 7, max_x = 38)
sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 8, max_x = 39)

sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 2, max_x = 34)
sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 3, max_x = 35)
sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 4, max_x = 36)
sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 5, max_x = 37)
sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 6, max_x = 38)
sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 7, max_x = 39)
sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 8, max_x = 40)

sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 2, max_x = 35)
sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 3, max_x = 36)
sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 4, max_x = 37)
sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 5, max_x = 38)
sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 6, max_x = 39)
sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 7, max_x = 40)
sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 8, max_x = 41)
```

### M = 4

-\> 8-43 with CP = 0.9504776

-\> 9-44 with CP = 0.9563396

-\> 10-45 with CP = 0.9566522

-\> 11-46 with CP = 0.9509466

```{r}
sum_ngh_pmf(N = 50, M = 4, m = 3, min_x = 6, max_x = 39)
sum_ngh_pmf(N = 50, M = 4, m = 3, min_x = 7, max_x = 40)
sum_ngh_pmf(N = 50, M = 4, m = 3, min_x = 8, max_x = 41)
sum_ngh_pmf(N = 50, M = 4, m = 3, min_x = 9, max_x = 42)
sum_ngh_pmf(N = 50, M = 4, m = 3, min_x = 10, max_x = 43)
sum_ngh_pmf(N = 50, M = 4, m = 3, min_x = 11, max_x = 44)
sum_ngh_pmf(N = 50, M = 4, m = 3, min_x = 12, max_x = 45)

sum_ngh_pmf(N = 50, M = 4, m = 3, min_x = 6, max_x = 40)
sum_ngh_pmf(N = 50, M = 4, m = 3, min_x = 7, max_x = 41)
sum_ngh_pmf(N = 50, M = 4, m = 3, min_x = 8, max_x = 42)
sum_ngh_pmf(N = 50, M = 4, m = 3, min_x = 9, max_x = 43)
sum_ngh_pmf(N = 50, M = 4, m = 3, min_x = 10, max_x = 44)
sum_ngh_pmf(N = 50, M = 4, m = 3, min_x = 11, max_x = 45)

sum_ngh_pmf(N = 50, M = 4, m = 3, min_x = 6, max_x = 41)
sum_ngh_pmf(N = 50, M = 4, m = 3, min_x = 7, max_x = 42)
sum_ngh_pmf(N = 50, M = 4, m = 3, min_x = 8, max_x = 43)
sum_ngh_pmf(N = 50, M = 4, m = 3, min_x = 9, max_x = 44)
sum_ngh_pmf(N = 50, M = 4, m = 3, min_x = 10, max_x = 45)
sum_ngh_pmf(N = 50, M = 4, m = 3, min_x = 11, max_x = 46)
sum_ngh_pmf(N = 50, M = 4, m = 3, min_x = 12, max_x = 47)
```

### M = 3

-\> 17-47 with CP = 0.9505612

```{r}
sum_ngh_pmf(N = 50, M = 3, m = 3, min_x = 17, max_x = 47)
```

### M = 2

-\> 48-48 with CP = 0

```{r}
sum_ngh_pmf(N = 50, M = 2, m = 3, min_x = 48, max_x = 48)
```

### M = 1

-\> 49-49 with CP = 0

```{r}
sum_ngh_pmf(N = 50, M = 1, m = 3, min_x = 49, max_x = 49)
```

### M = 0

-\> 50-50 with CP = 0

```{r}
sum_ngh_pmf(N = 50, M = 0, m = 3, min_x = 50, max_x = 50)
```

### Plot of All Possible Minimal Cardinality Acceptance Curves

```{r}
url = "https://raw.githubusercontent.com/rroggenk/Negative-Hypergeometric-Confidence-Intervals/refs/heads/main/M_Unknown/Minimal%20Cardinality%20Acceptance%20Curves%20(N%20%3D%2050%2C%20m%20%3D%203%2C%20CL%20%3D%200.95).csv"

data = read.csv(url, header = TRUE)
```

```{r}
conf_level= 0.95

ggplot(data, aes(x = M, y = Coverage.Probability, group = X.s.Set, color = X.s.Set)) +
  geom_line() +
  geom_point() +
  labs(x = "M", y = "Coverage Probability of M") +
  geom_hline(yintercept = conf_level, color = "red") +
  ylim(conf_level - 0.005, 1) +
  theme_minimal() +
  theme(legend.position = "none")
```

## N = 20, m = 3, Confidence Level = 0.95

### M = 20

-\> 0-0 with CP = 1

```{r}
sum_ngh_pmf(N = 20, M = 20, m = 3, min_x = 0, max_x = 0)
sum_ngh_pmf(N = 20, M = 20, m = 3, min_x = 1, max_x = 1)
```

### M = 19

-\> 0-1 with CP = 1

```{r}
sum_ngh_pmf(N = 20, M = 19, m = 3, min_x = 0, max_x = 0)
sum_ngh_pmf(N = 20, M = 19, m = 3, min_x = 1, max_x = 1)

sum_ngh_pmf(N = 20, M = 19, m = 3, min_x = 0, max_x = 1)
sum_ngh_pmf(N = 20, M = 19, m = 3, min_x = 1, max_x = 2)
```

### M = 18

-\> 0-1 with CP = 0.9684211

```{r}
sum_ngh_pmf(N = 20, M = 18, m = 3, min_x = 0, max_x = 1)
sum_ngh_pmf(N = 20, M = 18, m = 3, min_x = 1, max_x = 2)
```

### M = 17

-\> 0-2 with CP = 0.9912281

```{r}
sum_ngh_pmf(N = 20, M = 17, m = 3, min_x = 0, max_x = 1)
sum_ngh_pmf(N = 20, M = 17, m = 3, min_x = 1, max_x = 2)

sum_ngh_pmf(N = 20, M = 17, m = 3, min_x = 0, max_x = 2)
sum_ngh_pmf(N = 20, M = 17, m = 3, min_x = 1, max_x = 3)
```

### M = 16

-\> 0-2 with CP = 0.9680083

```{r}
sum_ngh_pmf(N = 20, M = 16, m = 3, min_x = 0, max_x = 2)
sum_ngh_pmf(N = 20, M = 16, m = 3, min_x = 1, max_x = 3)
```

### M = 15

-\> 0-3 with CP = 0.9860681

```{r}
sum_ngh_pmf(N = 20, M = 15, m = 3, min_x = 0, max_x = 2)
sum_ngh_pmf(N = 20, M = 15, m = 3, min_x = 1, max_x = 3)

sum_ngh_pmf(N = 20, M = 15, m = 3, min_x = 0, max_x = 3)
sum_ngh_pmf(N = 20, M = 15, m = 3, min_x = 1, max_x = 4)
```

### M = 14

-\> 0-3 with CP = 0.9625903

```{r}
sum_ngh_pmf(N = 20, M = 14, m = 3, min_x = 0, max_x = 3)
sum_ngh_pmf(N = 20, M = 14, m = 3, min_x = 1, max_x = 4)
```

### M = 13

-\> 0-4 with CP = 0.9776832

```{r}
sum_ngh_pmf(N = 20, M = 13, m = 3, min_x = 0, max_x = 3)
sum_ngh_pmf(N = 20, M = 13, m = 3, min_x = 1, max_x = 4)

sum_ngh_pmf(N = 20, M = 13, m = 3, min_x = 0, max_x = 4)
sum_ngh_pmf(N = 20, M = 13, m = 3, min_x = 1, max_x = 5)
```

### M = 12

-\> 0-5 with CP = 0.9845598

```{r}
sum_ngh_pmf(N = 20, M = 12, m = 3, min_x = 0, max_x = 4)
sum_ngh_pmf(N = 20, M = 12, m = 3, min_x = 1, max_x = 5)

sum_ngh_pmf(N = 20, M = 12, m = 3, min_x = 0, max_x = 5)
sum_ngh_pmf(N = 20, M = 12, m = 3, min_x = 1, max_x = 6)
```

### M = 11

-\> 0-5 with CP = 0.9601095

```{r}
sum_ngh_pmf(N = 20, M = 11, m = 3, min_x = 0, max_x = 5)
sum_ngh_pmf(N = 20, M = 11, m = 3, min_x = 1, max_x = 6)
```

### M = 10

-\> 0-6 with CP = 0.9651107

```{r}
sum_ngh_pmf(N = 20, M = 10, m = 3, min_x = 0, max_x = 5)
sum_ngh_pmf(N = 20, M = 10, m = 3, min_x = 1, max_x = 6)

sum_ngh_pmf(N = 20, M = 10, m = 3, min_x = 0, max_x = 6)
sum_ngh_pmf(N = 20, M = 10, m = 3, min_x = 1, max_x = 7)
```

### M = 9

-\> 0-7 with CP = 0.9651107

```{r}
sum_ngh_pmf(N = 20, M = 9, m = 3, min_x = 0, max_x = 6)
sum_ngh_pmf(N = 20, M = 9, m = 3, min_x = 1, max_x = 7)

sum_ngh_pmf(N = 20, M = 9, m = 3, min_x = 0, max_x = 7)
sum_ngh_pmf(N = 20, M = 9, m = 3, min_x = 1, max_x = 8)
```

### M = 8

-\> 0-8 with CP = 0.9601095

```{r}
sum_ngh_pmf(N = 20, M = 8, m = 3, min_x = 0, max_x = 7)
sum_ngh_pmf(N = 20, M = 8, m = 3, min_x = 1, max_x = 8)

sum_ngh_pmf(N = 20, M = 8, m = 3, min_x = 0, max_x = 8)
sum_ngh_pmf(N = 20, M = 8, m = 3, min_x = 1, max_x = 9)
```

### M = 7

-\> 0-10 with CP = 0.9776832

-\> 1-11 with CP = 0.9620743

```{r}
sum_ngh_pmf(N = 20, M = 7, m = 3, min_x = 0, max_x = 8)
sum_ngh_pmf(N = 20, M = 7, m = 3, min_x = 1, max_x = 9)
sum_ngh_pmf(N = 20, M = 7, m = 3, min_x = 2, max_x = 10)

sum_ngh_pmf(N = 20, M = 7, m = 3, min_x = 0, max_x = 9)
sum_ngh_pmf(N = 20, M = 7, m = 3, min_x = 1, max_x = 10)

sum_ngh_pmf(N = 20, M = 7, m = 3, min_x = 0, max_x = 10)
sum_ngh_pmf(N = 20, M = 7, m = 3, min_x = 1, max_x = 11)
sum_ngh_pmf(N = 20, M = 7, m = 3, min_x = 2, max_x = 12)
```

### M = 6

-\> 0-11 with CP = 0.9625903

-\> 1-12 with CP = 0.9685243

```{r}
sum_ngh_pmf(N = 20, M = 6, m = 3, min_x = 0, max_x = 10)
sum_ngh_pmf(N = 20, M = 6, m = 3, min_x = 1, max_x = 11)
sum_ngh_pmf(N = 20, M = 6, m = 3, min_x = 2, max_x = 12)

sum_ngh_pmf(N = 20, M = 6, m = 3, min_x = 0, max_x = 11)
sum_ngh_pmf(N = 20, M = 6, m = 3, min_x = 1, max_x = 12)
sum_ngh_pmf(N = 20, M = 6, m = 3, min_x = 2, max_x = 13)
```

### M = 5

-\> 1-13 with CP = 0.9592363

-\> 2-14 with CP = 0.9592363

```{r}
sum_ngh_pmf(N = 20, M = 5, m = 3, min_x = 0, max_x = 11)
sum_ngh_pmf(N = 20, M = 5, m = 3, min_x = 1, max_x = 12)
sum_ngh_pmf(N = 20, M = 5, m = 3, min_x = 2, max_x = 13)
sum_ngh_pmf(N = 20, M = 5, m = 3, min_x = 3, max_x = 14)

sum_ngh_pmf(N = 20, M = 5, m = 3, min_x = 0, max_x = 12)
sum_ngh_pmf(N = 20, M = 5, m = 3, min_x = 1, max_x = 13)
sum_ngh_pmf(N = 20, M = 5, m = 3, min_x = 2, max_x = 14)
sum_ngh_pmf(N = 20, M = 5, m = 3, min_x = 3, max_x = 15)
```

### M = 4

-\> 2-15 with CP = 0.9550052

-\> 3-16 with CP = 0.9680083

```{r}
sum_ngh_pmf(N = 20, M = 4, m = 3, min_x = 1, max_x = 13)
sum_ngh_pmf(N = 20, M = 4, m = 3, min_x = 2, max_x = 14)
sum_ngh_pmf(N = 20, M = 4, m = 3, min_x = 3, max_x = 15)
sum_ngh_pmf(N = 20, M = 4, m = 3, min_x = 4, max_x = 16)
sum_ngh_pmf(N = 20, M = 4, m = 3, min_x = 5, max_x = 17)

sum_ngh_pmf(N = 20, M = 4, m = 3, min_x = 1, max_x = 14)
sum_ngh_pmf(N = 20, M = 4, m = 3, min_x = 2, max_x = 15)
sum_ngh_pmf(N = 20, M = 4, m = 3, min_x = 3, max_x = 16)
sum_ngh_pmf(N = 20, M = 4, m = 3, min_x = 4, max_x = 17)
```

### M = 3

-\> 6-17 with CP = 0.9508772

```{r}
sum_ngh_pmf(N = 20, M = 3, m = 3, min_x = 6, max_x = 17)
```

### M = 2

-\> 18-18 with CP = 0

```{r}
sum_ngh_pmf(N = 20, M = 2, m = 3, min_x = 18, max_x = 18)
```

### M = 1

-\> 19-19 with CP = 0

```{r}
sum_ngh_pmf(N = 20, M = 1, m = 3, min_x = 19, max_x = 19)
```

### M = 0

-\> 20-20 with CP = 0

```{r}
sum_ngh_pmf(N = 20, M = 0, m = 3, min_x = 20, max_x = 20)
```

### Plot of All Possible Minimal Cardinality Acceptance Curves

```{r}
url = "https://raw.githubusercontent.com/rroggenk/Negative-Hypergeometric-Confidence-Intervals/refs/heads/main/M_Unknown/Minimal%20Cardinality%20Acceptance%20Curves%20(N%20%3D%2020%2C%20m%20%3D%203%2C%20CL%20%3D%200.95).csv"

data = read.csv(url, header = TRUE)
```

```{r}
conf_level= 0.95

ggplot(data, aes(x = M, y = Coverage.Probability, group = X.s.Set, color = X.s.Set)) +
  geom_line() +
  geom_point() +
  labs(x = "M", y = "Coverage Probability of M") +
  geom_hline(yintercept = conf_level, color = "red") +
  ylim(conf_level - 0.005, 1) +
  theme_minimal() +
  theme(legend.position = "none")
```

## Function to Find All Minimal Cardinality Acceptance Curves

```{r}
all_mc_ac <- function(N, m, conf_level = 0.95) {
  # Initializing the data frame that the function will output 
  results = data.frame(M = integer(), 
                       a = integer(), 
                       b = integer(), 
                       cardinality = integer(), 
                       coverage_prob = numeric())
  
  # Setting the initial min_a and min_b, always starts with 0-0
  min_a = 0
  min_b = 0
  
  for (M in N:0) {
    # Initializing a data frame that temporarily stores results
    temp_results = data.frame(M = integer(), 
                              a = integer(), 
                              b = integer(), 
                              cardinality = integer(), 
                              coverage_prob = numeric())
    
    # Find all possible acceptance curves that have non-decreasing a and b
    
    # Speical End Cases: When M < m
    if (M < m) {
      a = N - M
      b = N - M
      coverage_prob = sum_ngh_pmf(N, M, m, a, b)
      cardinality = b - a + 1
      temp_results = rbind(temp_results, data.frame(M = M, 
                                                    a = a, 
                                                    b = b, 
                                                    cardinality = cardinality, 
                                                    coverage_prob = coverage_prob))
    } 
    else {
      # Loops through the a first, making sure it only starts at min_a so that a is 
      # non-decreasing, stops at a N-M
      for (a in min_a:(N - M)) {
        # Loops through b: starting at the max of a and min_b to make sure that b >= a and 
        # so that b is non-decreasing, stops at N-M
        for (b in max(a, min_b):(N - M)) {
          # Calculates coverage probability, cardinality, and stores it in data frame
          coverage_prob = sum_ngh_pmf(N, M, m, a, b)
          cardinality = b - a + 1
          temp_results = rbind(temp_results, data.frame(M = M, 
                                                        a = a, 
                                                        b = b, 
                                                        cardinality = cardinality, 
                                                        coverage_prob = coverage_prob))
        }
      }
    }

    # Filter out the sets with the smallest cardinality and coverage probability >= conf_level 
    if (M >= m) {
      temp_results = temp_results %>%
        filter(coverage_prob >= conf_level) %>%
        group_by(M) %>%
        slice_min(order_by = cardinality, with_ties = TRUE) %>%
        ungroup()
      
      # Updates min_a and min_b for each iteration 
      if (nrow(temp_results) > 0) {
        min_a = max(min_a, min(temp_results$a))
        min_b = max(min_b, min(temp_results$b))
      }
    }
    
    results = rbind(results, temp_results)
  }

  # Separate the results into two data frames
  results_M_ge_m = results %>% 
    filter(M >= m)
  
  results_M_lt_m = results %>% 
    filter(M < m)
  
  # Combine the two data frames
  filtered_results = bind_rows(results_M_ge_m, results_M_lt_m) %>%
    arrange(desc(M))
  
  # Adds a column of the x set
  filtered_results = filtered_results %>%
    mutate(x_set = paste(a, b, sep = "-"))
  
  return(filtered_results)
}
```

```{r}
# test_20 = all_mc_ac(N = 20, m = 3, conf_level = 0.95)
# test_20
```

```{r}
# test_50 = all_mc_ac(N = 50, m = 3, conf_level = 0.95)
# test_50
```

## Function to Find MST Acceptance Curves

```{r}
mst_ac <- function(N, m, conf_level = 0.95) {
  # Gets all minimal cardinality acceptance curves 
  results = all_mc_ac(N, m, conf_level)
  
  # Initializes data frame that will be outputted 
  final_results = data.frame(M = integer(), 
                             a = integer(), 
                             b = integer(), 
                             cardinality = integer(), 
                             coverage_prob = numeric(), 
                             x_set = character())
  
  # Initializes min_a and min_b, starting at 0-0
  min_a = 0
  min_b = 0
  
  # Loops through with each M 
  for (current_M in N:0) {
    # Only looks at acceptance curves for the current M 
    subset_results = results %>% 
      filter(M == current_M)
    
    # If only one acceptance curve, then that is the acceptance curve  
    if (nrow(subset_results) == 1) {
      chosen_row = subset_results
    } 
    
    # If has more than one option, apply MST procedure
    # Filters so a and b are non-decreasing, and then chooses the row with the highest 
    # coverage probability 
    else {
      chosen_row = subset_results %>% 
        filter(a >= min_a, b >= min_b) %>% 
        arrange(desc(coverage_prob), desc(a), desc(b)) %>% 
        slice(1)
    }
    
    # Updates min_a and min_b and then adds row to final outputted data frame 
    if (nrow(chosen_row) > 0) {
      min_a = max(min_a, chosen_row$a)
      min_b = max(min_b, chosen_row$b)
      final_results = rbind(final_results, chosen_row)
    }
  }
  
  final_results = final_results %>%
    arrange(desc(M))
  
  return(final_results)
}
```

```{r}
# test_20_MST = mst_ac(N = 20, m = 3, conf_level = 0.95)
# test_20_MST
```

```{r}
#test_50_MST = mst_ac(N = 50, m = 3, conf_level = 0.95)
#test_50_MST
```

```{r}
# N = 200
# m = 20
# 
# coverage_df = mst_ac(N = N, m = m, conf_level = 0.95) %>%
#   filter(M >= m)
# mean(coverage_df$coverage_prob)
```

```{r}
data = mst_ac(N = 15, m = 3, conf_level = 0.95)

conf_level= 0.95

ggplot(data, aes(x = M, y = coverage_prob, group = x_set, color = x_set)) +
  geom_line() +
  geom_point() +
  labs(x = "M", y = "Coverage Probability of M") +
  geom_hline(yintercept = conf_level, color = "red") +
  ylim(conf_level - 0.005, 1) +
  theme_minimal() +
  theme(legend.position = "none")
```

## Function to Find CG Acceptance Curves

```{r}
cg_ac <- function(N, m, conf_level = 0.95) {
  # Gets all minimal cardinality acceptance curves
  results = all_mc_ac(N, m, conf_level)
  
  # Initializes data frame that will be outputted 
  final_results = data.frame(M = integer(), 
                              a = integer(), 
                              b = integer(), 
                              cardinality = integer(), 
                              coverage_prob = numeric(), 
                              x_set = character())
  
  # Initializes min_a and min_b, starting at 0-0
  min_a = 0
  min_b = 0
  
  # Loops through with each M
  for (current_M in N:0) {
    # Only looks at acceptance curves for the current M 
    subset_results = results %>% 
      filter(M == current_M)
    
    # If only one acceptance curve, then that is the acceptance curve 
    if (nrow(subset_results) == 1) {
      chosen_row = subset_results
    } 
    
    # If has more than one option, apply CG procedure
    # Filters so a and b are non-decreasing, and then chooses the row with the largest 
    # possible a and b
    else {
      chosen_row = subset_results %>% 
        filter(a >= min_a, b >= min_b) %>% 
        arrange(a, b) %>% 
        slice(1)
    }
    
    # Updates min_a and min_b and then adds row to final outputted data frame 
    if (nrow(chosen_row) > 0) {
      min_a = max(min_a, chosen_row$a)
      min_b = max(min_b, chosen_row$b)
      final_results = rbind(final_results, chosen_row)
    }
  }
  
  final_results = final_results %>%
    arrange(desc(M))
  
  return(final_results)
}
```

```{r}
# test_20_CG = cg_ac(N = 20, m = 3, conf_level = 0.95)
# test_20_CG
```

```{r}
# test_50_CG = cg_ac(N = 50, m = 3, conf_level = 0.95)
# test_50_CG
```

```{r}
# N = 200
# m = 20
# 
# coverage_df = cg_ac(N = N, m = m, conf_level = 0.95) %>%
#   filter(M >= m)
# mean(coverage_df$coverage_prob)
```

## Function to Find BK Acceptance Curves

```{r}
bk_ac <- function(N, m, conf_level = 0.95) {
  # Gets all minimal cardinality acceptance curves
  results = all_mc_ac(N, m, conf_level)
  
  # Initializes data frame that will be outputted 
  final_results = data.frame(M = integer(), 
                             a = integer(), 
                             b = integer(), 
                             cardinality = integer(), 
                             coverage_prob = numeric(), 
                             x_set = character())
  
  # Initializes min_a and min_b, starting at 0-0
  min_a = 0
  min_b = 0
  
  # Loops through with each M
  for (current_M in N:0) {
    # Only looks at acceptance curves for the current M 
    subset_results = results %>% 
      filter(M == current_M)
    
    # If only one acceptance curve, then that is the acceptance curve 
    if (nrow(subset_results) == 1) {
      chosen_row = subset_results
    } 
    
    # If has more than one option, apply MST procedure
    # Filters so a and b are non-decreasing, and then chooses the row with the smallest 
    # possible a and b
    else {
      chosen_row = subset_results %>% 
        filter(a >= min_a, b >= min_b) %>% 
        arrange(desc(a), desc(b)) %>% 
        slice(1)
    }
    
    # Updates min_a and min_b and then adds row to final outputted data frame 
    if (nrow(chosen_row) > 0) {
      min_a = max(min_a, chosen_row$a)
      min_b = max(min_b, chosen_row$b)
      final_results = rbind(final_results, chosen_row)
    }
  }
  
  final_results = final_results %>%
    arrange(desc(M))
  
  return(final_results)
}
```

```{r}
# test_20_BK = bk_ac(N = 20, m = 3, conf_level = 0.95)
# test_20_BK
```

```{r}
# test_50_BK = bk_ac(N = 50, m = 3, conf_level = 0.95)
# test_50_BK
```

```{r}
# N = 200
# m = 20
# 
# coverage_df = bk_ac(N = N, m = m, conf_level = 0.95) %>%
#   filter(M >= m)
# mean(coverage_df$coverage_prob)
```

## Function to Find Confidence Intervals Bounds

```{r}
minimal_cardinality_ci <- function(N, m, conf_level = 0.95, procedure = "MST") {
  # Chooses which minimal cardinality procedure 
  if (procedure == "MST") {
    results = mst_ac(N, m, conf_level)
  } 
  else if (procedure == "CG") {
    results = cg_ac(N, m, conf_level)
  } 
  else if (procedure == "BK") {
    results = bk_ac(N, m, conf_level)
  } 
  else {
    stop("Invalid procedure. Choose from 'MST', 'CG', or 'BK'.")
  }
  
  # Initializes data frame that will be outputted 
  ci_results = data.frame(x = integer(), 
                          ci_lb = integer(), 
                          ci_ub = integer(), 
                          ci = character(),
                          stringsAsFactors = FALSE)
  
  # Loops through each x 
  for (x in 0:N) {
    # Finds first interval where x appears 
    first_occurrence = results %>% 
      filter(a <= x, x <= b) %>% 
      slice(1)
    
    # Finds last interval where x appears 
    last_occurrence = results %>% 
      filter(a <= x, x <= b) %>% 
      slice(n())
    
    # Finds the M of the corresponding above intervals and saves those as the CI bounds
    if (nrow(first_occurrence) > 0 && nrow(last_occurrence) > 0) {
      ci_ub = first_occurrence$M
      ci_lb = last_occurrence$M
      ci = paste0("[", ci_lb, ", ", ci_ub, "]")
      
      ci_results = rbind(ci_results, data.frame(x = x, 
                                                ci_lb = ci_lb, 
                                                ci_ub = ci_ub, 
                                                ci = ci))
    }
  }
  
  return(ci_results)
}
```

```{r}
test_20_CI_mst = minimal_cardinality_ci(N = 20, m = 3, conf_level = 0.95, procedure = "MST")
test_20_CI_mst
```

```{r}
test_50_CI_mst = minimal_cardinality_ci(N = 50, m = 3, conf_level = 0.95, procedure = "MST")
test_50_CI_mst
```

```{r}
test_20_CI_cg = minimal_cardinality_ci(N = 20, m = 3, conf_level = 0.95, procedure = "CG")
test_20_CI_cg
```

```{r}
test_50_CI_cg = minimal_cardinality_ci(N = 50, m = 3, conf_level = 0.95, procedure = "CG")
test_50_CI_cg
```

```{r}
test_20_CI_bk = minimal_cardinality_ci(N = 20, m = 3, conf_level = 0.95, procedure = "BK")
test_20_CI_bk
```

```{r}
test_50_CI_bk = minimal_cardinality_ci(N = 50, m = 3, conf_level = 0.95, procedure = "BK")
test_50_CI_bk
```
