---
title: "Interval Length (M Unknown)"
author: "Rachel Roggenkemper"
format: html
editor: visual
---

```{r}
library(extraDistr)
library(tidyverse)

source('../functions.R', encoding = 'UTF-8')
```

# Expected Length

```{r}
expected_length <- function(data_frame, lb_col_name, ub_col_name, N, M, m) {
  sum = 0
  for (xi in 0:(N - M)) {
    length = data_frame[[ub_col_name]][data_frame$x == xi] -
      data_frame[[lb_col_name]][data_frame$x == xi] + 1
    prob = ngh_pmf(x = xi, N = N, M = M, m = m)
    indiv = length * prob
    sum = sum + indiv
  }
  return(sum)
}
```

# Average Length

```{r}
average_length <- function(data_frame, lb_col_name, ub_col_name) {
  length = data_frame[[ub_col_name]] - data_frame[[lb_col_name]] + 1
  average_length = mean(length)
  return(average_length)
}
```

# Note: Minimal Cardinality Procedures

The average length is the same for the minimal cardinality procedures. This is because they are choosing choosing between acceptance sets of minimal cardinality (so the same minimal length). The only difference is between which minimal cardinality sets are being chosen, but the length of them is the same since they are minimal cardinality. Thus, the average length is the same for the minimal cardinality procedures.

Therefore, Modified Sterne (MST) is considered superior because they all have the same average length, but MST chooses the acceptance sets with the highest coverage probability, so with the same length as the other minimal cardinality procedures, MST is getting the most coverage.

# Plot of Expected and Average Length

## First choose N, m, and confidence level!

```{r}
N = 50
m = 3
conf_level = 0.95
```

## Normal Approximation (MLE)

```{r}
data = CI_cov_prob_MLE(N = N, m = m, conf_level = conf_level)
average_length(data, "lower_bound", "upper_bound")



# Create a data frame to store the results
results = data.frame(M = integer(), ExpectedLength = numeric())

# Calculate expected length for each M
for (M_i in m:N) {
  exp_len = expected_length(data, "lower_bound", "upper_bound", N = N, M = M_i, m = m)
  results = rbind(results, data.frame(M = M_i, ExpectedLength = exp_len))
}

# Plot using ggplot2
ggplot(results, aes(x = M, y = ExpectedLength)) +
  geom_point() +
  geom_hline(yintercept = average_length(data, "lower_bound", "upper_bound"), color = "red") +
  labs(x = "M", y = "Expected Length") +
  theme_minimal()
```

## Normal Approximation (Unbiased)

```{r}
data = CI_cov_prob_unbiased(N = N, m = m, conf_level = conf_level)
average_length(data, "lower_bound", "upper_bound")



# Create a data frame to store the results
results = data.frame(M = integer(), ExpectedLength = numeric())

# Calculate expected length for each M
for (M_i in m:N) {
  exp_len = expected_length(data, "lower_bound", "upper_bound", N = N, M = M_i, m = m)
  results = rbind(results, data.frame(M = M_i, ExpectedLength = exp_len))
}

# Plot using ggplot2
ggplot(results, aes(x = M, y = ExpectedLength)) +
  geom_point() +
  geom_hline(yintercept = average_length(data, "lower_bound", "upper_bound"), color = "red") +
  labs(x = "M", y = "Expected Length") +
  theme_minimal()
```

## Analog to Clopper-Pearson

```{r}
data = CI_cov_prob(N = N, m = m, conf_level = conf_level)
average_length(data, "lower_bound", "upper_bound")



# Create a data frame to store the results
results = data.frame(M = integer(), ExpectedLength = numeric())

# Calculate expected length for each M
for (M_i in m:N) {
  exp_len = expected_length(data, "lower_bound", "upper_bound", N = N, M = M_i, m = m)
  results = rbind(results, data.frame(M = M_i, ExpectedLength = exp_len))
}

# Plot using ggplot2
ggplot(results, aes(x = M, y = ExpectedLength)) +
  geom_point() +
  geom_hline(yintercept = average_length(data, "lower_bound", "upper_bound"), color = "red") +
  labs(x = "M", y = "Expected Length") +
  theme_minimal()
```

## MST

```{r}
data = minimal_cardinality_ci(N = N, m = m, conf_level = conf_level, procedure = "MST")
average_length(data, "ci_lb", "ci_ub")



# Create a data frame to store the results
results = data.frame(M = integer(), ExpectedLength = numeric())

# Calculate expected length for each M
for (M_i in m:N) {
  exp_len = expected_length(data, "ci_lb", "ci_ub", N = N, M = M_i, m = m)
  results = rbind(results, data.frame(M = M_i, ExpectedLength = exp_len))
}

# Plot using ggplot2
ggplot(results, aes(x = M, y = ExpectedLength)) +
  geom_point() +
  geom_hline(yintercept = average_length(data, "ci_lb", "ci_ub"), color = "red") +
  labs(x = "M", y = "Expected Length") +
  theme_minimal()
```

## CG

```{r}
data = minimal_cardinality_ci(N = N, m = m, conf_level = conf_level, procedure = "CG")
average_length(data, "ci_lb", "ci_ub")



# Create a data frame to store the results
results = data.frame(M = integer(), ExpectedLength = numeric())

# Calculate expected length for each M
for (M_i in m:N) {
  exp_len = expected_length(data, "ci_lb", "ci_ub", N = N, M = M_i, m = m)
  results = rbind(results, data.frame(M = M_i, ExpectedLength = exp_len))
}

# Plot using ggplot2
ggplot(results, aes(x = M, y = ExpectedLength)) +
  geom_point() +
  geom_hline(yintercept = average_length(data, "ci_lb", "ci_ub"), color = "red") +
  labs(x = "M", y = "Expected Length") +
  theme_minimal()
```

## BK

```{r}
data = minimal_cardinality_ci(N = N, m = m, conf_level = conf_level, procedure = "BK")
average_length(data, "ci_lb", "ci_ub")



# Create a data frame to store the results
results = data.frame(M = integer(), ExpectedLength = numeric())

# Calculate expected length for each M
for (M_i in m:N) {
  exp_len = expected_length(data, "ci_lb", "ci_ub", N = N, M = M_i, m = m)
  results = rbind(results, data.frame(M = M_i, ExpectedLength = exp_len))
}

# Plot using ggplot2
ggplot(results, aes(x = M, y = ExpectedLength)) +
  geom_point() +
  geom_hline(yintercept = average_length(data, "ci_lb", "ci_ub"), color = "red") +
  labs(x = "M", y = "Expected Length") +
  theme_minimal()
```

## Blaker

```{r}
data = blaker_ci(N = N, m = m, conf_level = conf_level)
average_length(data, "ci_lb", "ci_ub")



# Create a data frame to store the results
results = data.frame(M = integer(), ExpectedLength = numeric())

# Calculate expected length for each M
for (M_i in m:N) {
  exp_len = expected_length(data, "ci_lb", "ci_ub", N = N, M = M_i, m = m)
  results = rbind(results, data.frame(M = M_i, ExpectedLength = exp_len))
}

# Plot using ggplot2
ggplot(results, aes(x = M, y = ExpectedLength)) +
  geom_point() +
  geom_hline(yintercept = average_length(data, "ci_lb", "ci_ub"), color = "red") +
  labs(x = "M", y = "Expected Length") +
  theme_minimal()
```

## CMC

```{r}
data = cmc_ci(N = N, m = m, conf_level = conf_level)
average_length(data, "ci_lb", "ci_ub")



# Create a data frame to store the results
results = data.frame(M = integer(), ExpectedLength = numeric())

# Calculate expected length for each M
for (M_i in m:N) {
  exp_len = expected_length(data, "ci_lb", "ci_ub", N = N, M = M_i, m = m)
  results = rbind(results, data.frame(M = M_i, ExpectedLength = exp_len))
}

# Plot using ggplot2
ggplot(results, aes(x = M, y = ExpectedLength)) +
  geom_point() +
  geom_hline(yintercept = average_length(data, "ci_lb", "ci_ub"), color = "red") +
  labs(x = "M", y = "Expected Length") +
  theme_minimal()
```

# Plot of Expected Length

## Data Preparation

Commented out b/c saved dataset as a .csv file so I don't have to re-run code each time

```{r}
# # Initialize the variables
# conf_level <- 0.95
# Ns <- c(50, 200)
# ms <- c(3, 20)
# 
# # Initialize an empty data frame to store all the results
# all_results <- data.frame()
# 
# # Loop through each combination of N and m
# for (N in Ns) {
#   for (m in ms) {
#     
#     methods <- list(
#       "Normal Approximation (MLE)" = CI_cov_prob_MLE(N = N, m = m, conf_level = conf_level),
#       "Normal Approximation (Unbiased)" = CI_cov_prob_unbiased(N = N, m = m, conf_level = conf_level),
#       "Analog to Clopper-Pearson" = CI_cov_prob(N = N, m = m, conf_level = conf_level),
#       "MST" = minimal_cardinality_ci(N = N, m = m, conf_level = conf_level, procedure = "MST"),
#       "CG" = minimal_cardinality_ci(N = N, m = m, conf_level = conf_level, procedure = "CG"),
#       "BK" = minimal_cardinality_ci(N = N, m = m, conf_level = conf_level, procedure = "BK"),
#       "Blaker" = blaker_ci(N = N, m = m, conf_level = conf_level),
#       "CMC" = cmc_ci(N = N, m = m, conf_level = conf_level)
#     )
#     
#     for (method_name in names(methods)) {
#       data <- methods[[method_name]]
#       
#       # Determine the correct column names for bounds
#       if (method_name %in% c("Normal Approximation (MLE)", "Normal Approximation (Unbiased)", "Analog to Clopper-Pearson")) {
#         lb_col <- "lower_bound"
#         ub_col <- "upper_bound"
#       } else {
#         lb_col <- "ci_lb"
#         ub_col <- "ci_ub"
#       }
#       
#       # Check if the method returned valid data
#       if (nrow(data) > 0) {
#         
#         # Calculate expected length for each M
#         results <- data.frame(M = integer(), ExpectedLength = numeric(), Method = character(), N = integer(), m = integer())
#         
#         for (M_i in m:N) {
#           exp_len <- expected_length(data, lb_col, ub_col, N = N, M = M_i, m = m)
#           
#           # Only add to results if exp_len is not empty or NULL
#           if (!is.null(exp_len) && length(exp_len) > 0) {
#             results <- rbind(results, data.frame(M = M_i, ExpectedLength = exp_len, Method = method_name, N = N, m = m))
#           }
#         }
#         
#         all_results <- rbind(all_results, results)
#       }
#     }
#   }
# }
```

```{r}
# Saved as CSV file b/c takes a while to run 
# write.csv(all_results, file.path(getwd(), "expected_length.csv"), row.names = FALSE)
```

## Plot

Note: Should we include Normal Approximation methods in the plot? I was thinking no since the coverage sucks, so even since the expected length is good, it gives a false idea because coverage sucks.

```{r}
# Load the data
all_results <- read_csv("expected_length.csv") %>%
  filter(!(Method %in% c("Normal Approximation (MLE)", "Normal Approximation (Unbiased)")))

# Define a distinct color palette
distinct_colors <- c("red", "blue", "green", "purple", "orange", "cyan", "magenta", "yellow")

# Custom labels for N and m
N_labels <- c("50" = "N = 50", "200" = "N = 200")
m_labels <- c("3" = "m = 3", "20" = "m = 20")

# Combine N and m labels into a single factor for facetting
all_results$facet_label <- factor(
  paste("N =", all_results$N, ", m =", all_results$m),
  levels = c("N = 50 , m = 3", "N = 200 , m = 3", "N = 50 , m = 20", "N = 200 , m = 20")
)

# Create the plot using facet_wrap for independent axes
ggplot(all_results, aes(x = M, y = ExpectedLength, color = Method)) +
  geom_line(size = 1, alpha = 0.6) +  # Adjust line thickness and transparency
  scale_color_manual(values = distinct_colors) +  # Use the distinct color palette
  facet_wrap(~ facet_label, scales = "free") +  # Use facet_wrap with free scales
  labs(x = "M", y = "Expected Length", color = "Method") +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    strip.text = element_text(size = 12),  # Increase facet label size for clarity
    panel.spacing = unit(1, "lines"),  # Increase spacing between panels for clarity
    axis.title.y = element_text(margin = margin(r = 10)),  # Add margin to y-axis label
    axis.title.x = element_text(margin = margin(t = 10))   # Add margin to x-axis label
  )
```

```{r}
#| message: false

all_results <- read_csv("expected_length.csv") %>%
  filter(!(Method %in% c("Normal Approximation (MLE)", "Normal Approximation (Unbiased)")))

relative_df <- all_results %>%
  pivot_wider(names_from = Method, values_from = ExpectedLength) %>%
  mutate(across(-c(M, N, m, CMC), ~ .x / CMC)) %>%
  pivot_longer(cols = -c(M, N, m, CMC), names_to = "Method", values_to = "RelativeExpectedLength") %>%
  mutate(facet_label = factor(
    paste("N =", N, ", m =", m),
    levels = c("N = 50 , m = 3", "N = 200 , m = 3", "N = 50 , m = 20", "N = 200 , m = 20")
  ))

# distinct_colors <- c("red", "blue", "green", "purple", "orange", "cyan", "magenta", "yellow")
distinct_colors <- c("#0072B2", "#E69F00", "#CC79A7", "#009E73", "#9400D3", "#F0E442")

ggplot(relative_df, aes(x = M, y = RelativeExpectedLength, 
                        color = Method, linetype = Method)) +
  geom_line(linewidth = 1, alpha = 1) +
  geom_hline(yintercept = 1, color = "red", linetype = "dashed") +
  scale_color_manual(values = distinct_colors) +
  facet_wrap(~ facet_label, scales = "free") + 
  labs(x = "M", y = "Relative Expected Length (to CMC)", 
       color = "Method", linetype = "Method") +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    strip.text = element_text(size = 12),
    panel.spacing = unit(1, "lines"),
    axis.title.y = element_text(margin = margin(r = 10)),
    axis.title.x = element_text(margin = margin(t = 10))
  )
```

```{r}
# distinct_colors <- c("red", "blue", "green", "purple", "orange", "cyan", "magenta", "yellow")
distinct_colors <- c("#0072B2", "#E69F00", "#CC79A7", "#009E73", "#9400D3", "#F0E442")

ggplot(relative_df, aes(x = M, y = RelativeExpectedLength, 
                        color = Method, linetype = Method)) +
  geom_line(linewidth = 1, alpha = 1) +
  geom_hline(yintercept = 1, color = "red", linetype = "dashed") +
  scale_color_manual(values = distinct_colors) +
  facet_wrap(~ facet_label, scales = "free") + 
  labs(x = "M", y = "Relative Expected Length (to CMC)", 
       color = "Method", linetype = "Method") +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    panel.background = element_rect(fill = "#ecf6fa", color = NA), 
    plot.background = element_rect(fill = "#ecf6fa", color = NA),  
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_rect(color = "#21272c", fill = NA, size = 1),
    axis.ticks = element_line(size = 0.5),
    axis.ticks.length = unit(2, "mm"),
    axis.text.x = element_text(margin = margin(t = 5)),
    axis.text.y = element_text(margin = margin(r = 5)),
    axis.title = element_text(color = "#21272c"),
    plot.title = element_text(color = "#21272c")
  )
```

# Plot of Average Length

Note: Should we include Normal Approximation methods in the plot? I was thinking no since the coverage sucks, so even since the expected length is good, it gives a false idea because coverage sucks.

Commented out b/c saved dataset as a .csv file so I don't have to re-run code each time

```{r}
# # Define the combinations of N and m
# combinations <- list(
#   list(N = 50, m = 3),
#   list(N = 200, m = 3),
#   list(N = 50, m = 20),
#   list(N = 200, m = 20)
# )
# 
# # Define the confidence level
# conf_level <- 0.95
# 
# # Placeholder to store the results
# results <- data.frame()
# 
# # Loop through each combination
# for (comb in combinations) {
#   N <- comb$N
#   m <- comb$m
#   
#   # Collect data for each method
#   data_MLE <- CI_cov_prob_MLE(N = N, m = m, conf_level = conf_level)
#   data_unbiased <- CI_cov_prob_unbiased(N = N, m = m, conf_level = conf_level)
#   data_CP <- CI_cov_prob(N = N, m = m, conf_level = conf_level)
#   data_MST <- minimal_cardinality_ci(N = N, m = m, conf_level = conf_level, procedure = "MST")
#   data_CG <- minimal_cardinality_ci(N = N, m = m, conf_level = conf_level, procedure = "CG")
#   data_BK <- minimal_cardinality_ci(N = N, m = m, conf_level = conf_level, procedure = "BK")
#   data_blaker <- blaker_ci(N = N, m = m, conf_level = conf_level)
#   data_cmc <- cmc_ci(N = N, m = m, conf_level = conf_level)
#   
#   # Calculate average length for each method
#   avg_length_MLE <- average_length(data_MLE, "lower_bound", "upper_bound")
#   avg_length_unbiased <- average_length(data_unbiased, "lower_bound", "upper_bound")
#   avg_length_CP <- average_length(data_CP, "lower_bound", "upper_bound")
#   avg_length_MST <- average_length(data_MST, "ci_lb", "ci_ub")
#   avg_length_CG <- average_length(data_CG, "ci_lb", "ci_ub")
#   avg_length_BK <- average_length(data_BK, "ci_lb", "ci_ub")
#   avg_length_blaker <- average_length(data_blaker, "ci_lb", "ci_ub")
#   avg_length_cmc <- average_length(data_cmc, "ci_lb", "ci_ub")
#   
#   # Combine the results
#   comb_results <- data.frame(
#     Method = c("MLE", "Unbiased", "Analog to Clopper-Pearson", "MST", "CG", "BK", "Blaker", "CMC"),
#     N = N,
#     m = m,
#     AverageLength = c(avg_length_MLE, avg_length_unbiased, avg_length_CP, avg_length_MST, 
#                       avg_length_CG, avg_length_BK, avg_length_blaker, avg_length_cmc)
#   )
#   
#   # Append to the results dataframe
#   results <- rbind(results, comb_results)
# }
```

```{r}
# Saved as CSV file b/c takes a while to run 
# write.csv(results, file.path(getwd(), "average_length.csv"), row.names = FALSE)
```

```{r}
#| message: false
set.seed(1)

# Load the data
results <- read_csv("average_length_cov_prob.csv")

# Remove rows where Method is "Normal"
results <- results %>% 
  filter(Method != "Normal Approximation (MLE)") %>%
  filter(Method != "Normal Approximation (Unbiased)")

# Replace method name
results$Method <- gsub("Analog to Clopper-Pearson", "ACP", results$Method)

# Combine N and m labels into a single factor for facetting
results$facet_label <- factor(
  paste("N =", results$N, ", m =", results$m),
  levels = c("N = 50 , m = 3", "N = 200 , m = 3", "N = 50 , m = 20", "N = 200 , m = 20")
)

# Define a distinct color palette (CUD palette, extended)
distinct_colors <- c(
  "#0072B2", # blue
  "#E69F00", # orange
  "#CC79A7", # pink
  "#009E73", # green
  "#9400D3", # purple
  "#F0E442", # yellow
  "#56B4E9", # sky blue
  "#D55E00"  # vermilion
)

# Select shapes that support fill (21–25)
shape_vals <- c(21, 22, 23, 24, 25, 21, 22, 23)[1:length(unique(results$Method))]

# Create the plot
ggplot(results, aes(
  x = AverageLength, 
  y = AverageCovProb, 
  color = Method, 
  shape = Method, 
  fill = Method
)) +
  geom_jitter(size = 3, alpha = 0.9, width = 0.015, height = 0, stroke = 1.1) +
  geom_hline(yintercept = 0.95, color = "red", linetype = "dashed") +
  facet_wrap(~ facet_label, scales = "free_x") +  # fix y-axis only
  scale_color_manual(values = distinct_colors) +
  scale_fill_manual(values = distinct_colors) +
  scale_shape_manual(values = shape_vals) +
  scale_y_continuous(limits = c(0.95, 0.983)) +  # manually fix y-axis
  labs(
    x = "Average Length", 
    y = "Average Coverage Probability", 
    color = "Method", 
    shape = "Method", 
    fill = "Method"
  ) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    strip.text = element_text(size = 12)
  )
```

```{r}
# Define a distinct color palette
# distinct_colors <- c("red", "blue", "green", "purple", "orange", "cyan", "magenta", "yellow")
distinct_colors <- c(
  "#0072B2", # blue
  "#E69F00", # orange
  "#CC79A7", # pink
  "#009E73", # green
  "#9400D3", # purple
  "#F0E442", # yellow
  "#56B4E9", # sky blue (from extended CUD palette)
  "#D55E00"  # vermilion (also from extended CUD)
)

# Create the scatter plot using facet_wrap for independent axes
ggplot(results, aes(x = AverageLength, y = AverageCovProb, color = Method)) +
  geom_jitter(size = 3, alpha = 0.8, width = 0, height = 0) +  
  geom_hline(yintercept = 0.95, color = "red", linetype = "dashed") +
  facet_wrap(~ facet_label, scales = "free") +  # Use facet_wrap with free scales
  scale_color_manual(values = distinct_colors) +  # Apply the distinct color palette
  labs(x = "Average Length", y = "Average Coverage Probability", color = "Method") +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    panel.background = element_rect(fill = "#ecf6fa", color = NA), 
    plot.background = element_rect(fill = "#ecf6fa", color = NA),  
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_rect(color = "#21272c", fill = NA, size = 1),
    axis.ticks = element_line(size = 0.5),
    axis.ticks.length = unit(2, "mm"),
    axis.text.x = element_text(margin = margin(t = 5)),
    axis.text.y = element_text(margin = margin(r = 5)),
    axis.title = element_text(color = "#21272c"),
    plot.title = element_text(color = "#21272c")
  )
```
