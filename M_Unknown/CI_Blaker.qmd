---
title: "NHG Confidence Intervals for M: Blaker's Method"
author: "Rachel Roggenkemper"
format: html
editor: visual
---

```{r, warning=FALSE}
library(extraDistr)
library(tidyverse)
```

```{r}
# ngh_pmf <- function(x, N, M, m) {
#   # m = # total successes (unknown) - (our notation: M)
#   m_pmf = M  
#   
#   # n = # total failures - (our notation: X = N - M)
#   n_pmf = N - m_pmf 
#   
#   # r = # fixed successes (our notation: m)
#   r_pmf = m   
#   
#   # x = # balls being drawn (our notation: n = m + x) 
#   x_pmf = r_pmf + x
#   
#   return(dnhyper(x = x_pmf, m = m_pmf, n = n_pmf, r = r_pmf))
# }


ngh_pmf <- function(x, N, M, m) {
  numerator = choose(m + x - 1, m - 1) * choose(N - m - x, M - m)
  denominator = choose(N, M)
  result = numerator / denominator
  return(result)
}

# Original (top): ngh_pmf(x = 0, N = 50, M = 50, m = 3) -> R crashes (end points doesn't work for coverage prob)
# New (bottom): ngh_pmf(x = 0, N = 50, M = 50, m = 3) -> 1
```

```{r}
ngh_cdf <- function(x, N, M, m, lower_tail = TRUE) {
  # m = # total successes (unknown) - (our notation: M)
  m_pmf = M  
  
  # n = # total failures - (our notation: X = N - M)
  n_pmf = N - m_pmf 
  
  # r = # fixed successes (our notation: m)
  r_pmf = m   
  
  # x = # balls being drawn (our notation: n = m + x) 
  x_pmf = r_pmf + x
  
  return(pnhyper(q = x_pmf, m = m_pmf, n = n_pmf, r = r_pmf, lower.tail = lower_tail))
}
```

```{r}
# Function that sums the ngh_pmf based on a min_x and max_x
sum_ngh_pmf <- function(N, M, m, min_x, max_x) {
  sum_pmf = 0
  for (x in min_x:max_x) {
    sum_pmf = sum_pmf + ngh_pmf(x, N, M, m)
  }
  return(sum_pmf)
}
```

# Blaker's Method

## Function to Find Acceptance Curves

```{r}
# When finding all x's with min tail prob as small, including the fixed_x 
blaker_ac <- function(N, m, conf_level = 0.95) {
  alpha = 1 - conf_level 
  
  # Initializing data frame to store info through iterations
  results = data.frame(M = integer(), 
                       x = integer(), 
                       min_tail_prob = numeric(), 
                       acceptance_set = character())
  
  # Calculates min_tail_prob for each M and x
  # Iterating through each M
  for (M in 0:N) {
    # Special case if M < m, x bounds are known so so min_tail_prob is needed 
    if (M < m) {
      x = N - M
      results = rbind(results, data.frame(M = M, 
                                          x = x,
                                          min_tail_prob = NA,
                                          acceptance_set = as.character(x)))
    } 
    else {
      # Iterating through each x 
      for (x in 0:(N - M)) {
        # Calculates min_tail_prob
        area_left = ngh_cdf(x = x, N = N, M = M, m = m, lower_tail = TRUE)
        area_right = ngh_cdf(x = x - 1, N = N, M = M, m = m, lower_tail = FALSE)
        min_tail_prob = min(area_left, area_right)
        
        # Stores min_tail_prob in a dataframe along with coresponding M and x
        results = rbind(results, data.frame(M = M, 
                                            x = x,
                                            min_tail_prob = min_tail_prob,
                                            acceptance_set = NA))
      }
    }
  }
  
  # Initializes data frame for output 
  final_results = data.frame(M = integer(), 
                             acceptance_set = character(), 
                             a = integer(), 
                             b = integer(), 
                             cardinality = integer(), 
                             coverage_prob = numeric(), 
                             x_set = character(), 
                             gap = logical())
  
  # Calculate the acceptance sets based on min_tail_prob
  # Iterating through each M 
  for (fixed_M in 0:N) {
    acceptance_set = c()
    x_set = ""
    
    # Special Case: if M < m, acceptance set is already known 
    if (fixed_M < m) {
      # Directly include x = N - M for M < m
      acceptance_set = as.character(N - fixed_M)
      acceptance_set_num = as.numeric(acceptance_set)
      
      a = min(acceptance_set_num)
      b = max(acceptance_set_num)
      cardinality = length(acceptance_set_num)
      coverage_prob = 0
      gap = FALSE
      acceptance_set_str = acceptance_set
      x_set = paste(a, b, sep = "-")
    } 
    
    # When M >= m
    else {
      # Iterating through each x 
      for (fixed_x in 0:(N - fixed_M)) {
        # Finds the min_tail_prob for the fixed_M and fixed_x
        min_tail_prob_fixed_x = results %>% 
          filter(M == fixed_M & x == fixed_x) %>% 
          select(min_tail_prob) %>% 
          pull()
        
        # Finds all x's with min_tail_prob as small as the fixed_x (includes fixed_x)
        possible_xs = results %>% 
          #filter(M == fixed_M & x != fixed_x & min_tail_prob <= min_tail_prob_fixed_x) %>% 
          # if i use above line, would need a condition when fixed_M == N
          filter(M == fixed_M & min_tail_prob <= min_tail_prob_fixed_x) %>% 
          select(x) %>% 
          pull()
        
        # Sums up the pmf of all x's with min-tail prob as small as fixed_x
        prob_sum = sum(unlist(lapply(possible_xs, function(px) ngh_pmf(x = px, 
                                                                       N = N, 
                                                                       M = fixed_M, 
                                                                       m = m))))
        
        # If the sum of pmf is greater than alpha, add the fixed_x to the acceptance set 
        if (prob_sum > alpha) {
          acceptance_set = c(acceptance_set, fixed_x)
        }
      }
    
      acceptance_set = as.numeric(acceptance_set)
      acceptance_set_str = paste(unique(acceptance_set), collapse = ",")
      
      # Calculating cardinality and coverage probability 
      a = min(acceptance_set)
      b = max(acceptance_set)
      cardinality = length(acceptance_set)
      coverage_prob = sum(unlist(lapply(acceptance_set, function(px) ngh_pmf(x = px, 
                                                                             N = N, 
                                                                             M = fixed_M, 
                                                                             m = m))))
      # gap is a boolean (TRUE / FALSE) of whether there is a gap present in acceptance set
      gap = any(diff(sort(acceptance_set)) > 1)
      
      # If there is no gap, formatting x_set
      if (!gap) {
        x_set = paste(a, b, sep = "-")
      } 
      # When there is a gap, formatting x_set 
      else {
        intervals = c()
        start = acceptance_set[1]
        for (i in 2:length(acceptance_set)) {
          if (acceptance_set[i] != acceptance_set[i - 1] + 1) {
            intervals = c(intervals, paste(start, acceptance_set[i - 1], sep = "-"))
            start = acceptance_set[i]
          }
        }
        intervals = c(intervals, 
                      paste(start, acceptance_set[length(acceptance_set)], sep = "-"))
        x_set = paste(intervals, collapse = ", ")
      }
    }
    
    # Adding final_results to the data frame to be outputted 
    final_results = rbind(final_results, 
                          data.frame(M = fixed_M, 
                                     acceptance_set = acceptance_set_str, 
                                     a = a, 
                                     b = b, 
                                     cardinality = cardinality, 
                                     coverage_prob = coverage_prob, 
                                     x_set = x_set, 
                                     gap = gap))
  }
  final_results = final_results %>%
    arrange(desc(M))
  
  return(final_results)
}
```

```{r}
# test_20_blaker = blaker_ac(N = 20, m = 3, conf_level = 0.95)
# test_20_blaker
```

```{r}
# test_50_blaker = blaker_ac(N = 50, m = 3, conf_level = 0.95)
# test_50_blaker
```

```{r}
# N = 200
# m = 20
# 
# coverage_df = blaker_ac(N = N, m = m, conf_level = 0.95) %>%
#   filter(M >= m)
# mean(coverage_df$coverage_prob)
```

## Function to Find Confidence Intervals

```{r}
blaker_ci <- function(N, m, conf_level = 0.95) {
  results = blaker_ac(N, m, conf_level)
  
  # Check if there are any gaps
  if (any(results$gap)) {
    return("Gaps present in acceptance sets")
  }
  
  # Initializes data frame that will be outputted 
  ci_results = data.frame(x = integer(), 
                          ci_lb = integer(), 
                          ci_ub = integer(), 
                          ci = character(),
                          stringsAsFactors = FALSE)
  
  # Loops through each x 
  for (x in 0:N) {
    # Finds first interval where x appears 
    first_occurrence = results %>% 
      filter(a <= x, x <= b) %>% 
      slice(1)
    
    # Finds last interval where x appears 
    last_occurrence = results %>% 
      filter(a <= x, x <= b) %>% 
      slice(n())
    
    # Finds the M of the corresponding above intervals and saves those as the CI bounds
    if (nrow(first_occurrence) > 0 && nrow(last_occurrence) > 0) {
      ci_ub = first_occurrence$M
      ci_lb = last_occurrence$M
      ci = paste0("[", ci_lb, ", ", ci_ub, "]")
      
      ci_results = rbind(ci_results, data.frame(x = x, 
                                                ci_lb = ci_lb, 
                                                ci_ub = ci_ub, 
                                                ci = ci))
    }
  }
  
  return(ci_results)
}
```

```{r}
test_20_CI_blaker = blaker_ci(N = 20, m = 3, conf_level = 0.95)
test_20_CI_blaker
```

```{r}
test_50_CI_blaker = blaker_ci(N = 50, m = 3, conf_level = 0.95)
test_50_CI_blaker
```

## Plot of Coverage Probability

### N = 20, m = 3, conf_level = 0.95

```{r}
data = blaker_ac(N = 20, m = 3, conf_level = 0.95)
conf_level= 0.95

ggplot(data, aes(x = M, y = coverage_prob, group = x_set, color = x_set)) +
  geom_line() +
  geom_point() +
  labs(x = "M", y = "Coverage Probability of M") +
  geom_hline(yintercept = conf_level, color = "red") +
  ylim(conf_level - 0.005, 1) +
  theme_minimal() +
  theme(legend.position = "none")
```

### N = 50, m = 3, conf_level = 0.95

```{r}
data = blaker_ac(N = 50, m = 3, conf_level = 0.95)
conf_level= 0.95

ggplot(data, aes(x = M, y = coverage_prob, group = x_set, color = x_set)) +
  geom_line() +
  geom_point() +
  labs(x = "M", y = "Coverage Probability of M") +
  geom_hline(yintercept = conf_level, color = "red") +
  ylim(conf_level - 0.005, 1) +
  theme_minimal() +
  theme(legend.position = "none")
```

```{r}
data = blaker_ac(N = 50, m = 3, conf_level = 0.95)
conf_level= 0.95

ggplot(data, aes(x = M, y = coverage_prob, group = x_set)) +
  geom_line() +
  geom_point() +
  labs(x = "M", y = "Coverage Probability") +
  geom_hline(yintercept = conf_level, color = "red") +
  scale_y_continuous(breaks = c(0.95, 1), limits = c(conf_level - 0.005, 1)) +
  theme_minimal() +
  theme(
    legend.position = "none", 
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_rect(color = "black", fill = NA, size = 1),
    axis.ticks = element_line(size = 0.5),
    axis.ticks.length = unit(2, "mm"),
    axis.text.x = element_text(margin = margin(t = 5)),
    axis.text.y = element_text(margin = margin(r = 5))) 
```
