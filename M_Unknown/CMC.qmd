---
title: "Conditional Minimal Cardinality (CMC)"
author: "Rachel Roggenkemper"
format: html
editor: visual
---

# Loading Packages

```{r}
library(extraDistr)
library(tidyverse)
```

# Preliminary Functions

```{r}
ngh_pmf <- function(x, N, M, m) {
  # Conditions: check supports
  if (x > (N - M) || N < M || m > M) {
    return(0)
  }

  numerator <- choose(m + x - 1, m - 1) * choose(N - m - x, M - m)
  denominator <- choose(N, M)
  result <- numerator / denominator

  return(result)
}


ngh_cdf = function(x, N, M, m, lower_tail = TRUE) {
  # m = # total successes (unknown) - (our notation: M)
  m_pmf = M  
  
  # n = # total failures - (our notation: X = N - M)
  n_pmf = N - m_pmf 
  
  # r = # fixed successes (our notation: m)
  r_pmf = m   
  
  # x = # balls being drawn (our notation: n = m + x) 
  x_pmf = r_pmf + x
  
  return(pnhyper(q = x_pmf, m = m_pmf, n = n_pmf, r = r_pmf, lower.tail = lower_tail))
}


sum_ngh_pmf <- function(N, M, m, min_x, max_x) {
  sum_pmf = 0
  for (x in min_x:max_x) {
    if (x >= 0 && x <= (N - M)) {
      sum_pmf = sum_pmf + ngh_pmf(x, N, M, m)
    }
  }
  return(sum_pmf)
}
```

# Find CMC Acceptance Curves

```{r}
# My idea for the CMC approach was to re-use some of my code from the minimal cardinality
# procedures. I took the first part that finds all possible acceptance curves that have 
# non-decreasing a and b. Then, because I'm working with dots and not curves, I just looped
# through each M and do my filtering within the loops. So for each M, starting from the right 
# (when M = N), after finding all possible acceptance curves for that M, I first filter out all # acceptance curves with coverage probability below the confidence level. So now for that M, 
# we have all non-decreasing a/b acceptance curves with coverage above the confidence level. 
# Then, I pick the acceptance curve with the highest a, which is doing the step of choosing the # next rainbow once it rises above the confidence level. Then, to choose the core / inner most
# curve / lowest possible curve or dot in this instance, I choose the acceptance curve with the # lowest b. This is the same as doing the lowest curve because a is already fixed, so choosing 
# the acceptance curve with the lowest b is the same as choosing the lowest possible curve/dot. # Then I repeat this step for all M, making sure that it is still forcing a and b to be 
# non-decreasing. 


cmc_ac <- function(N, m, conf_level = 0.95) {
  # Initializing the data frame that the function will output 
  results = data.frame(M = integer(), 
                       a = integer(), 
                       b = integer(), 
                       cardinality = integer(), 
                       coverage_prob = numeric())
  
  # Setting the initial min_a and min_b, always starts with 0-0
  min_a = 0
  min_b = 0
  
  for (M in N:0) {
    # Initializing a data frame that temporarily stores results
    temp_results = data.frame(M = integer(), 
                              a = integer(), 
                              b = integer(), 
                              cardinality = integer(), 
                              coverage_prob = numeric())
    
    # Find all possible acceptance curves that have non-decreasing a and b
    
    # Speical End Cases: When M < m
    if (M < m) {
      a = N - M
      b = N - M
      coverage_prob = sum_ngh_pmf(N, M, m, a, b)
      cardinality = b - a + 1
      temp_results = rbind(temp_results, data.frame(M = M, 
                                                    a = a, 
                                                    b = b, 
                                                    cardinality = cardinality, 
                                                    coverage_prob = coverage_prob))
    } 
    else {
      # Loops through the a first, making sure it only starts at min_a so that a is 
      # non-decreasing, stops at a N-M
      for (a in min_a:(N - M)) {
        # Loops through b: starting at the max of a and min_b to make sure that b >= a and 
        # so that b is non-decreasing, stops at N-M
        for (b in max(a, min_b):(N - M)) {
          # Calculates coverage probability, cardinality, and stores it in data frame
          coverage_prob = sum_ngh_pmf(N, M, m, a, b)
          cardinality = b - a + 1
          temp_results = rbind(temp_results, data.frame(M = M, 
                                                        a = a, 
                                                        b = b, 
                                                        cardinality = cardinality, 
                                                        coverage_prob = coverage_prob))
        }
      }
    }


    # Filter out the sets with the coverage probability >= conf_level
    # For each M, filters out to choose the acceptance curve with the highest a and the 
    # lowest b (which is the same as the one with the lowest coverage prob that is still
    # above the confidence level)
    if (M >= m) {
      temp_results = temp_results %>%
        filter(coverage_prob >= conf_level & coverage_prob >= 0 & coverage_prob <= 1) %>%
        group_by(M) %>%
        filter(a == max(a)) %>%
        filter(b == min(b)) %>%
        ungroup()

      # Updates min_a and min_b for each iteration
      if (nrow(temp_results) > 0) {
        min_a = max(min_a, min(temp_results$a))
        min_b = max(min_b, min(temp_results$b))
      }
    }

    results = rbind(results, temp_results)
  }

  # Arranges data by descreasing M
  filtered_results = results %>%
    arrange(desc(M))

  # Adds a column of the x set
  filtered_results = filtered_results %>%
    mutate(x_set = paste(a, b, sep = "-"))

  return(filtered_results)
    
}
```

```{r}
cmc_ac_vec <- function(N, m, conf_level = 0.95) {
  # Initialize the final results
  results <- data.frame(
    M              = integer(),
    a              = integer(),
    b              = integer(),
    cardinality    = integer(),
    coverage_prob  = numeric()
  )
  
  # Start with these constraints
  min_a <- 0
  min_b <- 0
  
  # Loop over M from N down to 0
  for (M_val in seq.int(N, 0, by = -1)) {
    # A temporary data frame for the current M_val
    temp_results <- data.frame(
      M              = integer(),
      a              = integer(),
      b              = integer(),
      cardinality    = integer(),
      coverage_prob  = numeric()
    )
    
    # Special End Case: M_val < m => we have exactly (a, b) = (N - M_val, N - M_val)
    if (M_val < m) {
      a_val <- N - M_val
      b_val <- a_val
      
      coverage_val  <- sum_ngh_pmf(N, M_val, m, a_val, b_val)
      cardinality   <- b_val - a_val + 1
      
      temp_results <- rbind(
        temp_results,
        data.frame(
          M              = M_val,
          a              = a_val,
          b              = b_val,
          cardinality    = cardinality,
          coverage_prob  = coverage_val
        )
      )
      
    } else {
      # M_val >= m => create a grid of all valid (a, b) pairs with:
      #   a in [min_a, N - M_val],
      #   b in [min_b, N - M_val],
      #   b >= a (to ensure non-decreasing).
      
      ab_grid <- expand.grid(
        a = seq.int(min_a, N - M_val),
        b = seq.int(min_b, N - M_val)
      ) %>%
        filter(b >= a)
      
      # If there's no valid (a, b), skip
      if (nrow(ab_grid) > 0) {
        # Vectorized coverage probability computation using mapply
        coverage_vec <- mapply(
          FUN = function(a_val, b_val) {
            sum_ngh_pmf(N, M_val, m, a_val, b_val)
          },
          ab_grid$a,
          ab_grid$b
        )
        
        # Build temp_results for all (a, b)
        temp_results <- data.frame(
          M              = M_val,
          a              = ab_grid$a,
          b              = ab_grid$b,
          cardinality    = ab_grid$b - ab_grid$a + 1,
          coverage_prob  = coverage_vec
        )
      }
    }
    
    # Filter out the sets with coverage probability >= conf_level
    # Among those, choose the acceptance curve with the highest a and the lowest b
    # (the same as "the one with the lowest coverage_prob that is still >= conf_level"
    # in your description).
    if (M_val >= m && nrow(temp_results) > 0) {
      temp_results <- temp_results %>%
        filter(coverage_prob >= conf_level & coverage_prob >= 0 & coverage_prob <= 1) %>%
        group_by(M) %>%
        filter(a == max(a)) %>%
        filter(b == min(b)) %>%
        ungroup()
      
      # Update min_a and min_b if we found any valid intervals
      if (nrow(temp_results) > 0) {
        min_a <- max(min_a, min(temp_results$a))
        min_b <- max(min_b, min(temp_results$b))
      }
    }
    
    # Append the current iterationâ€™s data to the final results
    results <- rbind(results, temp_results)
  }
  
  # Arrange in descending order of M
  filtered_results <- results %>%
    arrange(desc(M))
  
  # Add a column "x_set" to show "a-b"
  filtered_results <- filtered_results %>%
    mutate(x_set = paste(a, b, sep = "-"))
  
  return(filtered_results)
}
```

```{r}
test = cmc_ac(N = 20, m = 3, conf_level = 0.95)
test

test = cmc_ac_vec(N = 20, m = 3, conf_level = 0.95)
test
```

```{r}
# N = 200
# m = 20
# 
# coverage_df = cmc_ac(N = N, m = m, conf_level = 0.95) %>%
#   filter(M >= m)
# mean(coverage_df$coverage_prob)
```

# CMC Confidence Intervals

```{r}
cmc_ci <- function(N, m, conf_level = 0.95) {
  results = cmc_ac(N, m, conf_level)
  
  # Initializes data frame that will be outputted 
  ci_results = data.frame(x = integer(), 
                          ci_lb = integer(), 
                          ci_ub = integer(), 
                          ci = character(),
                          stringsAsFactors = FALSE)
  
  # Loops through each x 
  for (x in 0:N) {
    # Finds first interval where x appears 
    first_occurrence = results %>% 
      filter(a <= x, x <= b) %>% 
      slice(1)
    
    # Finds last interval where x appears 
    last_occurrence = results %>% 
      filter(a <= x, x <= b) %>% 
      slice(n())
    
    # Finds the M of the corresponding above intervals and saves those as the CI bounds
    if (nrow(first_occurrence) > 0 && nrow(last_occurrence) > 0) {
      ci_ub = first_occurrence$M
      ci_lb = last_occurrence$M
      ci = paste0("[", ci_lb, ", ", ci_ub, "]")
      
      ci_results = rbind(ci_results, data.frame(x = x, 
                                                ci_lb = ci_lb, 
                                                ci_ub = ci_ub, 
                                                ci = ci))
    }
  }
  
  return(ci_results)
}
```

```{r}
cmc_ci_vec <- function(N, m, conf_level = 0.95) {
  results <- cmc_ac_vec(N, m, conf_level)
  
  x_values <- seq.int(0, N)
  row_list <- vector("list", length(x_values))
  
  for (i in seq_along(x_values)) {
    x_val <- x_values[i]
    
    first_occurrence <- results %>% filter(a <= x_val, x_val <= b) %>% slice(1)
    last_occurrence  <- results %>% filter(a <= x_val, x_val <= b) %>% slice(n())
    
    if (nrow(first_occurrence) > 0 && nrow(last_occurrence) > 0) {
      ci_ub <- first_occurrence$M
      ci_lb <- last_occurrence$M
      ci_str <- paste0("[", ci_lb, ", ", ci_ub, "]")
      
      row_list[[i]] <- data.frame(
        x     = x_val,
        ci_lb = ci_lb,
        ci_ub = ci_ub,
        ci    = ci_str,
        stringsAsFactors = FALSE
      )
    }
  }
  
  ci_results <- do.call(rbind, row_list[!sapply(row_list, is.null)])
  return(ci_results)
}
```

```{r}
test_20_CI = cmc_ci(N = 20, m = 3, conf_level = 0.95)
test_20_CI

test_20_CI_vec = cmc_ci_vec(N = 20, m = 3, conf_level = 0.95)
test_20_CI_vec
```

```{r}
test_50_CI = cmc_ci(N = 50, m = 3, conf_level = 0.95)
test_50_CI

test_50_CI_vec = cmc_ci_vec(N = 50, m = 3, conf_level = 0.95)
test_50_CI_vec
```

# Plot of Coverage Probability

## N = 20, m = 3, conf_level = 0.95

```{r}
data = cmc_ac(N = 20, m = 3, conf_level = 0.95)
conf_level= 0.95

ggplot(data, aes(x = M, y = coverage_prob, group = x_set, color = x_set)) +
  geom_line() +
  geom_point() +
  labs(x = "M", y = "Coverage Probability of M") +
  geom_hline(yintercept = conf_level, color = "red") +
  ylim(conf_level - 0.005, 1) +
  theme_minimal() +
  theme(legend.position = "none")
```

## N = 50, m = 3, conf_level = 0.95

```{r}
data = cmc_ac(N = 50, m = 3, conf_level = 0.95)
conf_level= 0.95

ggplot(data, aes(x = M, y = coverage_prob, group = x_set, color = x_set)) +
  geom_line() +
  geom_point() +
  labs(x = "M", y = "Coverage Probability of M") +
  geom_hline(yintercept = conf_level, color = "red") +
  ylim(conf_level - 0.005, 1) +
  theme_minimal() +
  theme(legend.position = "none")
```

# Plot of Rainbows

```{r}
rainbows <- function(N, m, conf_level = 0.95) {
  # Initializing the data frame that the function will output 
  results = data.frame(M = integer(), 
                       a = integer(), 
                       b = integer(), 
                       cardinality = integer(), 
                       coverage_prob = numeric())
  
  # Setting the initial min_a and min_b, always starts with 0-0
  min_a = 0
  min_b = 0
  
  for (M in N:0) {
    # Initializing a data frame that temporarily stores results
    temp_results = data.frame(M = integer(), 
                              a = integer(), 
                              b = integer(), 
                              cardinality = integer(), 
                              coverage_prob = numeric())
    
    # Find all possible acceptance curves that have non-decreasing a and b
    
    # Speical End Cases: When M < m
    if (M < m) {
      a = N - M
      b = N - M
      coverage_prob = sum_ngh_pmf(N, M, m, a, b)
      cardinality = b - a + 1
      temp_results = rbind(temp_results, data.frame(M = M, 
                                                    a = a, 
                                                    b = b, 
                                                    cardinality = cardinality, 
                                                    coverage_prob = coverage_prob))
    } 
    else {
      # Loops through the a first, making sure it only starts at min_a so that a is 
      # non-decreasing, stops at a N-M
      for (a in min_a:(N - M)) {
        # Loops through b: starting at the max of a and min_b to make sure that b >= a and 
        # so that b is non-decreasing, stops at N-M
        for (b in max(a, min_b):(N - M)) {
          # Calculates coverage probability, cardinality, and stores it in data frame
          coverage_prob = sum_ngh_pmf(N, M, m, a, b)
          cardinality = b - a + 1
          temp_results = rbind(temp_results, data.frame(M = M, 
                                                        a = a, 
                                                        b = b, 
                                                        cardinality = cardinality, 
                                                        coverage_prob = coverage_prob))
        }
      }
    }


    # Filter out the sets with the coverage probability >= conf_level
    # For each M, filters out to choose the acceptance curve with the highest a and the 
    # lowest b (which is the same as the one with the lowest coverage prob that is still
    # above the confidence level)
    if (M >= m) {
      temp_results = temp_results %>%
        filter(coverage_prob >= conf_level) %>%
        # group_by(M) %>%
        # filter(a == max(a)) %>%
        # filter(b == min(b)) %>%
        ungroup()

      # Updates min_a and min_b for each iteration
      if (nrow(temp_results) > 0) {
        min_a = max(min_a, min(temp_results$a))
        min_b = max(min_b, min(temp_results$b))
      }
    }

    results = rbind(results, temp_results)
  }

  # # Arranges data by descreasing M
  # filtered_results = results %>%
  #   arrange(desc(M))
  # 
  # # Adds a column of the x set
  # filtered_results = filtered_results %>%
  #   mutate(x_set = paste(a, b, sep = "-"))

  return(results)
    
}
```

```{r}
plot_all_ac <- function(N, m, conf_level = 0.95) {
  # Initializing the data frame that the function will output 
  results = data.frame(M = integer(), 
                       a = integer(), 
                       b = integer(), 
                       cardinality = integer(), 
                       coverage_prob = numeric())
  
  # Setting the initial min_a and min_b, always starts with 0-0
  min_a = 0
  min_b = 0
  
  for (M in N:0) {
    # Initializing a data frame that temporarily stores results
    temp_results = data.frame(M = integer(), 
                              a = integer(), 
                              b = integer(), 
                              cardinality = integer(), 
                              coverage_prob = numeric())
    
    # Find all possible acceptance curves that have non-decreasing a and b
    
    # Speical End Cases: When M < m
    if (M < m) {
      a = N - M
      b = N - M
      coverage_prob = sum_ngh_pmf(N, M, m, a, b)
      cardinality = b - a + 1
      temp_results = rbind(temp_results, data.frame(M = M, 
                                                    a = a, 
                                                    b = b, 
                                                    cardinality = cardinality, 
                                                    coverage_prob = coverage_prob))
    } 
    else {
      # Loops through the a first, making sure it only starts at min_a so that a is 
      # non-decreasing, stops at a N-M
      for (a in min_a:(N - M)) {
        # Loops through b: starting at the max of a and min_b to make sure that b >= a and 
        # so that b is non-decreasing, stops at N-M
        for (b in max(a, min_b):(N - M)) {
          # Calculates coverage probability, cardinality, and stores it in data frame
          coverage_prob = sum_ngh_pmf(N, M, m, a, b)
          cardinality = b - a + 1
          temp_results = rbind(temp_results, data.frame(M = M, 
                                                        a = a, 
                                                        b = b, 
                                                        cardinality = cardinality, 
                                                        coverage_prob = coverage_prob))
        }
      }
    }


    # Filter out the sets with the coverage probability >= conf_level
    # For each M, filters out to choose the acceptance curve with the highest a and the 
    # lowest b (which is the same as the one with the lowest coverage prob that is still
    # above the confidence level)
    if (M >= m) {
      # temp_results = temp_results %>%
        # filter(coverage_prob >= conf_level) %>%
        # group_by(M) %>%
        # filter(a == max(a)) %>%
        # filter(b == min(b)) %>%
        # ungroup()

      # Updates min_a and min_b for each iteration
      if (nrow(temp_results) > 0) {
        min_a = max(min_a, min(temp_results$a))
        min_b = max(min_b, min(temp_results$b))
      }
    }

    results = rbind(results, temp_results)
  }

  # # Arranges data by descreasing M
  # filtered_results = results %>%
  #   arrange(desc(M))
  # 
  # # Adds a column of the x set
  results = results %>%
     mutate(x_set = paste(a, b, sep = "-"))

  return(results)
    
}
```

```{r}
# data = rainbows(N = 15, m = 3, conf_level = 0.95) %>%
#   filter(M >= 3)

data = rainbows(N = 15, m = 3, conf_level = 0.95) %>%
  filter(M >= 3) %>%
  group_by(M) %>%
  mutate(CMC = ifelse(a == max(a) & b == min(b[a == max(a)]), TRUE, FALSE)) %>%
  ungroup() %>%
  mutate(x_set = paste(a, b, sep = "-"))

data
```

```{r}
set.seed(2)

conf_level= 0.95

ggplot(data, aes(x = M, y = coverage_prob, color = as.factor(a), shape = as.factor(CMC))) +
  # geom_jitter for x_set == "1-10" and M == 5
  geom_jitter(data = subset(data, x_set == "1-10" & M == 5), 
              width = 0.3, height = 0, size = 3) +
  # geom_point for all other cases
  geom_point(data = subset(data, !(x_set == "1-10" & M == 5)), 
             size = 3) +
  geom_line(aes(group = x_set)) +
  labs(x = "M", y = "Coverage Probability") +
  geom_hline(yintercept = conf_level, color = "red") +
  scale_x_continuous(breaks = 3:15, limits = c(3, 15)) +
  scale_y_continuous(breaks = c(0.95, 1)) +
  scale_shape_manual(values = c("FALSE" = 16, "TRUE" = 8), guide = "none") + 
  scale_color_manual(values = c("0" = "#0072B2", 
                                "1" = "#E69F00", 
                                "2" = "#CC79A7", 
                                "3" = "#009E73", 
                                "4" = "#9400D3"),
                     labels = c("0" = "RB(0)", 
                                "1" = "RB(1)", 
                                "2" = "RB(2)", 
                                "3" = "RB(3)", 
                                "4" = "RB(4)"),
                     guide = guide_legend(title = NULL)) +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_rect(color = "black", fill = NA, size = 1),
    axis.ticks = element_line(size = 0.5),
    axis.ticks.length = unit(2, "mm"),
    axis.text.x = element_text(margin = margin(t = 5)),
    axis.text.y = element_text(margin = margin(r = 5)),
    legend.position = "right"
  )
```

```{r, echo = FALSE}
data = rainbows(N = 15, m = 3, conf_level = 0.95) %>%
  filter(M >= 3) %>%
  group_by(M) %>%
  mutate(CMC = ifelse(a == max(a) & b == min(b[a == max(a)]), TRUE, FALSE)) %>%
  ungroup() %>%
  mutate(x_set = paste(a, b, sep = "-"))

conf_level= 0.95



CMC <- data %>%
  filter(CMC == TRUE)



all_ac <- plot_all_ac(N = 15, m = 3, conf_level = 0.95)
all_ac["CMC"] <- FALSE
filtered_all_ac <- all_ac %>%
  anti_join(CMC, by = c("M", "x_set"))
all_ac_CMC <- bind_rows(CMC, filtered_all_ac)



# Initialize an empty data frame to store results
filtered_plot <- data.frame()

# Loop through each row in all_ac_mc_M_10_m_5
for (i in 1:nrow(CMC)) {
  # Get the current N and x_set
  current_M <- CMC$M[i]
  current_x_set <- CMC$x_set[i]
  current_a <- CMC$a[i]
  current_b <- CMC$b[i]
  
  # Filter for N, N-1, and N+1 where the x_set matches
  filtered_rows <- all_ac_CMC %>%
    filter((M >= current_M - 4 & M <= current_M + 4) & (a == current_a) & 
             (b >= current_b - 1 & b <= current_b + 1))
  
  # Append the filtered rows to the final dataframe
  filtered_plot <- bind_rows(filtered_plot, filtered_rows)
}

# Remove any duplicate rows just in case
filtered_plot <- distinct(filtered_plot)



ggplot(filtered_plot, aes(x = M, y = coverage_prob)) +
  # Add lines connecting all points, grouped by x_set and colored by a
  geom_line(aes(group = x_set, color = as.factor(a))) +
  # Add stars for CMC = TRUE points
  geom_point(data = filter(all_ac_CMC, CMC == TRUE), 
             aes(shape = as.factor(CMC), color = as.factor(a)), size = 3) +
  labs(x = "M", y = "Coverage Probability") +
  geom_hline(yintercept = conf_level, color = "red") +
  coord_cartesian(ylim = c(conf_level - 0.005, 1)) +
  scale_x_continuous(breaks = c(10, 20, 30, 40)) +
  scale_y_continuous(breaks = c(0.95, 1)) +
  scale_shape_manual(values = c("TRUE" = 8), guide = "none") + 
  scale_color_manual(values = c("0" = "#0072B2",
                                "1" = "#E69F00",
                                "2" = "#CC79A7",
                                "3" = "#009E73",
                                "4" = "#9400D3",
                                "5" = "#F0E442",
                                "6" = "#56B4E9"),
                     labels = c("0" = "RB(0)", 
                                "1" = "RB(1)", 
                                "2" = "RB(2)", 
                                "3" = "RB(3)", 
                                "4" = "RB(4)",
                                "5" = "RB(5)",
                                "6" = "RB(6)"),
                     guide = guide_legend(title = NULL)) +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_rect(color = "black", fill = NA, size = 1),
    axis.ticks = element_line(size = 0.5),
    axis.ticks.length = unit(2, "mm"),
    axis.text.x = element_text(margin = margin(t = 5)),
    axis.text.y = element_text(margin = margin(r = 5)),
    legend.position = "right"
  )
```
