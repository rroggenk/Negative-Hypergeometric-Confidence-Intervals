---
title: "Confidence Intervals (Exact Method)"
author: "Rachel Roggenkemper"
format: html
editor: visual
---

```{r, warning=FALSE}
library(extraDistr)
library(tidyverse)
```

```{r}
# ngh_pmf = function(x, N, M, m) {
#   # m = # total successes (unknown) - (our notation: M)
#   m_pmf = M  
#   
#   # n = # total failures - (our notation: X = N - M)
#   n_pmf = N - m_pmf 
#   
#   # r = # fixed successes (our notation: m)
#   r_pmf = m   
#   
#   # x = # balls being drawn (our notation: n = m + x) 
#   x_pmf = r_pmf + x
#   
#   return(dnhyper(x = x_pmf, m = m_pmf, n = n_pmf, r = r_pmf))
# }


ngh_pmf = function(x, N, M, m) {
  numerator = choose(m + x - 1, m - 1) * choose(N - m - x, M - m)
  denominator = choose(N, M)
  result = numerator / denominator
  return(result)
}

# Original (top): ngh_pmf(x = 0, N = 50, M = 50, m = 3) -> R crashes (end points doesn't work for coverage prob)
# New (bottom): ngh_pmf(x = 0, N = 50, M = 50, m = 3) -> 1
```

```{r}
ngh_cdf = function(x, N, M, m, lower_tail = TRUE) {
  # m = # total successes (unknown) - (our notation: M)
  m_pmf = M  
  
  # n = # total failures - (our notation: X = N - M)
  n_pmf = N - m_pmf 
  
  # r = # fixed successes (our notation: m)
  r_pmf = m   
  
  # x = # balls being drawn (our notation: n = m + x) 
  x_pmf = r_pmf + x
  
  return(pnhyper(q = x_pmf, m = m_pmf, n = n_pmf, r = r_pmf, lower.tail = lower_tail))
}
```

# Confidence Interval for M (total number of successes)

## Testing: m = 3, x = 4, N = 50, Confidence Level = 0.95

### Point Estimate of M

```{r}
# M = 21: Point Estimate of M 

m = 3
x = 4
N = 50
M = 21

data = data.frame(x = seq(0, 50))
data$y = ngh_pmf(x = (data$x), N = N, M = M, m = m)
ggplot(data, aes(x = x, y = y)) +
  geom_line() +
  geom_vline(xintercept = x, color = "red") +
  ggtitle(paste("NGH: M =", M)) +
  xlab("x values") +
  ylab("Density")
```

### Lower Bound

```{r}
# Lower Bound
# M = 6: Area to the left is just over (not under) 0.025 (alpha = 0.05)

m = 3
x = 4
N = 50
M = 6

data = data.frame(x = seq(0, 50))
data$y = ngh_pmf(x = (data$x), N = N, M = M, m = m)
ggplot(data, aes(x = x, y = y)) +
  geom_line() +
  geom_vline(xintercept = x, color = "red") +
  ggtitle(paste("NGH: M =", M)) +
  xlab("x values") +
  ylab("Density")


area_left = ngh_cdf(x = x, N = N, M = M, m = m, lower_tail = TRUE)
area_right = ngh_cdf(x = x - 1, N = N, M = M, m = m, lower_tail = FALSE)
print(paste("Area to the left of n =", m + x, "is:", area_left))
#print(paste("Area to the right of n =", m + x, "is:", area_right))
```

### Upper Bound

```{r}
# Upper Bound
# M = 37: Area to the right is just over (not under) 0.025 (alpha = 0.05)

m = 3
x = 4
N = 50
M = 37

data = data.frame(x = seq(0, 50))
data$y = ngh_pmf(x = (data$x), N = N, M = M, m = m)
# data$y = ngh_pmf(x = (data$x - m), N = N, M = M, m = m)
ggplot(data, aes(x = x, y = y)) +
  geom_line() +
  geom_vline(xintercept = x, color = "red") +
  ggtitle(paste("NGH: M =", M)) +
  xlab("x values") +
  ylab("Density") +
  xlim(0, 10)


area_left = ngh_cdf(x = x, N = N, M = M, m = m, lower_tail = TRUE)
area_right = ngh_cdf(x = x - 1, N = N, M = M, m = m, lower_tail = FALSE)
#print(paste("Area to the left of n =", m + x, "is:", area_left))
print(paste("Area to the right of n =", m + x, "is:", area_right))
```

## Confidence Interval Function

```{r}
NGH_CI_Exact_Method <- function(m, x, N, conf_level = 0.95) {
  target_probability = (1 - conf_level) / 2
  
  # Speical End Cases: When x in N-m to N
  if ((x >= (N - m)) & (x <= N)) {
    lower_bound = N - x
    upper_bound = N - x
  }
  
  else {
    lower_bound = m
    upper_bound = N
    
    # Find lower bound
    for (M in m:N) {
      area_left = ngh_cdf(x = x, N = N, M = M, m = m, lower_tail = TRUE)
      
      #if (area_left == target_probability) {
      if (isTRUE(all.equal(area_left, target_probability))) {
        lower_bound = M
        break
      }
      
      else if (area_left > target_probability) {
        lower_bound = M
        break
      }
    }
  
    # Find upper bound
    for (M in N:m) {
      area_right = ngh_cdf(x = x - 1, N = N, M = M, m = m, lower_tail = FALSE)
      
      #if (area_right == target_probability) {
      if (isTRUE(all.equal(area_right, target_probability))) {
        upper_bound = M
        break
      }
      
      else if (area_right > target_probability) {
        upper_bound = M 
        break
      }
    }
  }

  
  CL = (conf_level) * 100
  return(cat(CL, "% Confidence Interval for M: [", lower_bound, ",", upper_bound, "]\n"))
}
```

### Testing Confidence Interval Function

```{r}
# Debany: n = 3 (m + x)
# Debany CI: [15.3488, 49.9993]
m = 3
x = 0
N = 50
conf_level = 0.95

NGH_CI_Exact_Method(m, x, N, conf_level)
```

```{r}
# Debany: n = 4 (m + x)
# Debany CI: [10.4493, 48.9993]
m = 3
x = 1
N = 50
conf_level = 0.95

NGH_CI_Exact_Method(m, x, N, conf_level)
```

```{r}
# Debany: n = 5 (m + x)
# Debany CI: [8.0846, 46.1811]
m = 3
x = 2
N = 50
conf_level = 0.95

NGH_CI_Exact_Method(m, x, N, conf_level)
```

```{r}
# Debany: n = 6 (m + x)
# Debany CI: [6.6705, 41.9156]
m = 3
x = 3
N = 50
conf_level = 0.95

NGH_CI_Exact_Method(m, x, N, conf_level)
```

```{r}
# Debany: n = 7 (m + x)
# Debany CI: [5.7249, 37.8620]
m = 3
x = 4
N = 50
conf_level = 0.95

NGH_CI_Exact_Method(m, x, N, conf_level)
```

```{r}
# Debany: n = 8 (m + x)
# Debany CI: [5.0489, 34.2853]
m = 3
x = 5
N = 50
conf_level = 0.95

NGH_CI_Exact_Method(m, x, N, conf_level)
```

```{r}
# Debany: n = 9 (m + x)
# Debany CI: [4.5421, 31.1894]
m = 3
x = 6
N = 50
conf_level = 0.95

NGH_CI_Exact_Method(m, x, N, conf_level)
```

```{r}
# Debany: n = 10 (m + x)
# Debany CI: [4.1493, 28.5182]
m = 3
x = 7
N = 50
conf_level = 0.95

NGH_CI_Exact_Method(m, x, N, conf_level)
```

### Cal Poly COVID Example: CI for M

```{r}
set.seed(8)  

# Total number of students
N = 21778
# Number of positive students
M = 1293
# Number of positives to observe in sampling
m = 100

# Create a vector representing the population
population = c(rep(1, M), rep(0, N - M))  # 1 represents positive, 0 represents negative

# Sample until we get 100 positives
sample_positives = function(population, m) {
  positives_count = 0
  negatives_count = 0
  total_samples = 0
  
  while (positives_count < m) {
    sample = sample(population, 1)
    total_samples = total_samples + 1
    if (sample == 1) {
      positives_count = positives_count + 1
    } else {
      negatives_count = negatives_count + 1
    }
  }
  
  return(list(total_samples = total_samples, negatives_count = negatives_count))
}

# Run the sampling
result = sample_positives(population, m)
total_samples = result$total_samples
negatives_count = result$negatives_count

cat("Total samples taken to get 100 positives: ", total_samples, "\n")
cat("Number of negatives observed before getting 100 positives: ", negatives_count, "\n")
```

```{r}
m = 100
x = 1557
N = 21778
conf_level = 0.95

NGH_CI_Exact_Method(m, x, N, conf_level)
```

# Coverage Probability for M

```{r}
CI_cov_prob <- function(N, m, conf_level = 0.95) {
  target_probability = (1 - conf_level) / 2
  
  #results = data.frame(x = 0:(N - m), lower_bound = NA, upper_bound = NA)
  results = data.frame(x = 0:(N), lower_bound = NA, upper_bound = NA)
  
  #for (xi in 0:(N - m)) {
  for (xi in 0:(N)) {
    # Speical End Cases: When x in N-m to N
    if ((xi >= (N - m)) & (xi <= N)) {
      lower_bound = N - xi
      upper_bound = N - xi
    }
    
    else {
      lower_bound = m
      upper_bound = N
      
      # Find lower bound
      for (M in m:N) {
        area_left = ngh_cdf(x = xi, N = N, M = M, m = m, lower_tail = TRUE)
        
        #if (area_left == target_probability) {
        if (isTRUE(all.equal(area_left, target_probability))) {
          lower_bound = M
          break
        }
        
        else if (area_left > target_probability) {
          lower_bound = M
          break
        }
      }
    
      # Find upper bound
      for (M in N:m) {
        area_right = ngh_cdf(x = xi - 1, N = N, M = M, m = m, lower_tail = FALSE)
        
        #if (area_right == target_probability) {
        if (isTRUE(all.equal(area_right, target_probability))) {
          upper_bound = M
          break
        }
        
        else if (area_right > target_probability) {
          upper_bound = M
          break
        }
      }
    }
    
    # Store the results
    results[xi + 1, "lower_bound"] = lower_bound
    results[xi + 1, "upper_bound"] = upper_bound
  }
  
  return(results)
}
```

```{r}
coverage_prob <- function(M, N, m, conf_level = 0.95) {
  # if (M < m || M > N) {
  #   stop("Invalid parameters: Ensure M >= m, M <= N")
  #   }
  
  # Calculates all confidence intervals 
  ci_results = CI_cov_prob(N, m, conf_level)
  
  # Finds all x's where M is in the confidence interval 
  covered_x = ci_results %>% 
    filter(lower_bound <= M & upper_bound >= M) %>% 
    pull(x)
  
  if (length(covered_x) == 0) {
    return(data.frame(M = M, coverage_prob = NA, min_x = NA, max_x = NA))
  }
  
  # Finds the min and max of covered x's to know which lines to connect in plot
  min_x = min(covered_x, na.rm = TRUE)
  max_x = max(covered_x, na.rm = TRUE)
  
  # Sums the probabilities (pmf's) of all x's where M is in the CI 
  #total_prob = sum(sapply(covered_x, function(x) ngh_pmf(x, N, M, m)))
  total_prob = sum(unlist(lapply(covered_x, function(x) ngh_pmf(x, N, M, m))))
  return(data.frame(M = M, coverage_prob = total_prob, min_x = min_x, max_x = max_x))
}
```

### N = 20, m = 3, Confidence Level = 0.95

Coverage Probability = 0 when M = 0, 1, 2

```{r}
N = 20
m = 3
conf_level = 0.95
M_values = 0:N

coverage_df = do.call(rbind, lapply(M_values, function(M) coverage_prob(M, N, m, conf_level)))

# Create a group column for consistent min_x and max_x
# The group column assigns a unique group number whenever there is a change in min_x or max_x values
# cumsum is used to create a cumulative sum that increments the group number whenever there is a
# change in min_x or max_x
coverage_df = coverage_df %>%
  mutate(group = cumsum(c(1, diff(min_x) != 0 | diff(max_x) != 0)))

ggplot(coverage_df, aes(x = M, y = coverage_prob, group = group)) +
  geom_line() +
  geom_point() +
  labs(x = "M", y = "Coverage Probability of M") +
  geom_hline(yintercept = conf_level, color = "red") +
  # ylim(0, 1) +
  ylim(conf_level - 0.005, 1) +
  theme_minimal()
```

### N = 50, m = 3, Confidence Level = 0.95

Coverage Probability = 0 when M = 0, 1, 2

```{r}
N = 50
m = 3
conf_level = 0.95
M_values = 0:N

coverage_df = do.call(rbind, lapply(M_values, function(M) coverage_prob(M, N, m, conf_level)))

# Create a group column for consistent min_x and max_x
# The group column assigns a unique group number whenever there is a change in min_x or max_x values
# cumsum is used to create a cumulative sum that increments the group number whenever there is a
# change in min_x or max_x
coverage_df = coverage_df %>%
  mutate(group = cumsum(c(1, diff(min_x) != 0 | diff(max_x) != 0)))

ggplot(coverage_df, aes(x = M, y = coverage_prob, group = group)) +
  geom_line() +
  geom_point() +
  labs(x = "M", y = "Coverage Probability of M") +
  geom_hline(yintercept = conf_level, color = "red") +
  ylim(conf_level - 0.005, 1) +
  theme_minimal()
```

### N = 100, m = 3, Confidence Level = 0.95

Coverage Probability = 0 when M = 0, 1, 2

```{r}
N = 100
m = 3
conf_level = 0.95
M_values = 0:N

coverage_df = do.call(rbind, lapply(M_values, function(M) coverage_prob(M, N, m, conf_level)))

# Create a group column for consistent min_x and max_x
# The group column assigns a unique group number whenever there is a change in min_x or max_x values
# cumsum is used to create a cumulative sum that increments the group number whenever there is a
# change in min_x or max_x
coverage_df = coverage_df %>%
  mutate(group = cumsum(c(1, diff(min_x) != 0 | diff(max_x) != 0)))

ggplot(coverage_df, aes(x = M, y = coverage_prob, group = group)) +
  geom_line() +
  geom_point() +
  labs(x = "M", y = "Coverage Probability of M") +
  geom_hline(yintercept = conf_level, color = "red") +
  ylim(conf_level - 0.005, 1) +
  theme_minimal()
```

### Testing

```{r}
test <- function(M, N, m, conf_level = 0.95) {
  # if (M < m || M > N) {
  #   stop("Invalid parameters: Ensure M >= m, M <= N")
  #   }
  
  # Calculates all confidence intervals 
  ci_results = CI_cov_prob(N, m, conf_level)
  
  # Finds all x's where M is in the confidence interval 
  covered_x = ci_results %>% 
    filter(lower_bound <= M & upper_bound >= M) %>% 
    pull(x)
  
  # Finds the min and max of covered x's to know which lines to connect in plot
  min_x = min(covered_x)
  max_x = max(covered_x)
  
  # Sums the probabilities (pmf's) of all x's where M is in the CI 
  #total_prob = sum(sapply(covered_x, function(x) ngh_pmf(x, N, M, m)))
  total_prob = sum(unlist(lapply(covered_x, function(x) ngh_pmf(x, N, M, m))))
  return(covered_x)
}

# test(M = 0, N = 50, m = 3)
# test(M = 1, N = 50, m = 3)
# test(M = 2, N = 50, m = 3)
# test(M = 3, N = 50, m = 3)
# test(M = 4, N = 50, m = 3)
# test(M = 5, N = 50, m = 3)
# test(M = 6, N = 50, m = 3)
# test(M = 7, N = 50, m = 3)
# test(M = 8, N = 50, m = 3)
# test(M = 9, N = 50, m = 3)
# test(M = 10, N = 50, m = 3)
# test(M = 11, N = 50, m = 3)
# test(M = 12, N = 50, m = 3)
# test(M = 13, N = 50, m = 3)
# test(M = 14, N = 50, m = 3)
test(M = 15, N = 50, m = 3)
test(M = 16, N = 50, m = 3)
test(M = 17, N = 50, m = 3)
test(M = 18, N = 50, m = 3)
test(M = 19, N = 50, m = 3)
test(M = 20, N = 50, m = 3)
test(M = 21, N = 50, m = 3)
# test(M = 22, N = 50, m = 3)
# test(M = 23, N = 50, m = 3)
# test(M = 24, N = 50, m = 3)
# test(M = 25, N = 50, m = 3)
# test(M = 26, N = 50, m = 3)
# test(M = 27, N = 50, m = 3)
# test(M = 28, N = 50, m = 3)
# test(M = 29, N = 50, m = 3)
# test(M = 30, N = 50, m = 3)
# test(M = 31, N = 50, m = 3)
# test(M = 32, N = 50, m = 3)
# test(M = 33, N = 50, m = 3)
# test(M = 34, N = 50, m = 3)
# test(M = 35, N = 50, m = 3)
# test(M = 36, N = 50, m = 3)
# test(M = 37, N = 50, m = 3)
# test(M = 38, N = 50, m = 3)
# test(M = 39, N = 50, m = 3)
# test(M = 40, N = 50, m = 3)
# test(M = 41, N = 50, m = 3)
# test(M = 42, N = 50, m = 3)
# test(M = 43, N = 50, m = 3)
# test(M = 44, N = 50, m = 3)
# test(M = 45, N = 50, m = 3)
# test(M = 46, N = 50, m = 3)
# test(M = 47, N = 50, m = 3)
# test(M = 48, N = 50, m = 3)
# test(M = 49, N = 50, m = 3)
#test(M = 50, N = 50, m = 3)
```

```{r}
test_CI = CI_cov_prob(N = 50, m = 3) 
test_CI
```

# Minimal **Cardinality** Acceptance Curves

```{r}
sum_ngh_pmf = function(N, M, m, min_x, max_x) {
  sum_pmf = 0
  for (x in min_x:max_x) {
    sum_pmf = sum_pmf + ngh_pmf(x, N, M, m)
  }
  return(sum_pmf)
}
```

## N = 50, m = 3, Confidence Level = 0.95

### M = 50 

-\> 0-0 with CP = 1

```{r}
sum_ngh_pmf(N = 50, M = 50, m = 3, min_x = 0, max_x = 0)
sum_ngh_pmf(N = 50, M = 50, m = 3, min_x = 1, max_x = 1)

sum_ngh_pmf(N = 50, M = 50, m = 3, min_x = 0, max_x = 1)
```

### M = 49 

-\> 0-1 with CP = 1

```{r}
sum_ngh_pmf(N = 50, M = 49, m = 3, min_x = 0, max_x = 0)
sum_ngh_pmf(N = 50, M = 49, m = 3, min_x = 1, max_x = 1)

sum_ngh_pmf(N = 50, M = 49, m = 3, min_x = 0, max_x = 1)

sum_ngh_pmf(N = 50, M = 49, m = 3, min_x = 0, max_x = 2)
```

### M = 48

-\> 0-1 with CP = 0.9951021

```{r}
sum_ngh_pmf(N = 50, M = 48, m = 3, min_x = 0, max_x = 1)
sum_ngh_pmf(N = 50, M = 48, m = 3, min_x = 1, max_x = 2)
```

### M = 47

-\> 0-1 with CP = 0.9857143

```{r}
sum_ngh_pmf(N = 50, M = 47, m = 3, min_x = 0, max_x = 1)
sum_ngh_pmf(N = 50, M = 47, m = 3, min_x = 1, max_x = 2)
```

### M = 46: 

-\> 0-1 with CP = 0.9722319

```{r}
sum_ngh_pmf(N = 50, M = 46, m = 3, min_x = 0, max_x = 1)
sum_ngh_pmf(N = 50, M = 46, m = 3, min_x = 1, max_x = 2)
```

### M = 45

-\> 0-1 with CP = 0.9550369

```{r}
sum_ngh_pmf(N = 50, M = 45, m = 3, min_x = 0, max_x = 1)
sum_ngh_pmf(N = 50, M = 45, m = 3, min_x = 1, max_x = 2)
```

### M = 44

-\> 0-2 with CP = 0.9907559

```{r}
sum_ngh_pmf(N = 50, M = 44, m = 3, min_x = 0, max_x = 1)
sum_ngh_pmf(N = 50, M = 44, m = 3, min_x = 1, max_x = 2)

sum_ngh_pmf(N = 50, M = 44, m = 3, min_x = 0, max_x = 2)
sum_ngh_pmf(N = 50, M = 44, m = 3, min_x = 1, max_x = 3)
```

### M = 43

-\> 0-2 with CP = 0.9843631

```{r}
sum_ngh_pmf(N = 50, M = 43, m = 3, min_x = 0, max_x = 2)
sum_ngh_pmf(N = 50, M = 43, m = 3, min_x = 1, max_x = 3)
```

### M = 42

-\> 0-2 with CP = 0.9758292

```{r}
sum_ngh_pmf(N = 50, M = 42, m = 3, min_x = 0, max_x = 2)
sum_ngh_pmf(N = 50, M = 42, m = 3, min_x = 1, max_x = 3)
```

### M = 41

-\> 0-2 with CP = 0.9649928

```{r}
sum_ngh_pmf(N = 50, M = 41, m = 3, min_x = 0, max_x = 2)
sum_ngh_pmf(N = 50, M = 41, m = 3, min_x = 1, max_x = 3)
```

### M = 40

-\> 0-2 with CP = 0.9517396

```{r}
sum_ngh_pmf(N = 50, M = 40, m = 3, min_x = 0, max_x = 2)
sum_ngh_pmf(N = 50, M = 40, m = 3, min_x = 1, max_x = 3)
```

### M = 39

-\> 0-3 with CP = 0.9834488

```{r}
sum_ngh_pmf(N = 50, M = 39, m = 3, min_x = 0, max_x = 2)
sum_ngh_pmf(N = 50, M = 39, m = 3, min_x = 1, max_x = 3)

sum_ngh_pmf(N = 50, M = 39, m = 3, min_x = 0, max_x = 3)
sum_ngh_pmf(N = 50, M = 39, m = 3, min_x = 1, max_x = 4)
```

### M = 38

-\> 0-3 with CP = 0.9761493

```{r}
sum_ngh_pmf(N = 50, M = 38, m = 3, min_x = 0, max_x = 3)
sum_ngh_pmf(N = 50, M = 38, m = 3, min_x = 1, max_x = 4)
```

### M = 37

-\> 0-3 with CP = 0.9669288

```{r}
sum_ngh_pmf(N = 50, M = 37, m = 3, min_x = 0, max_x = 3)
sum_ngh_pmf(N = 50, M = 37, m = 3, min_x = 1, max_x = 4)
```

### M = 36

-\> 0-3 with CP = 0.9555901

```{r}
sum_ngh_pmf(N = 50, M = 36, m = 3, min_x = 0, max_x = 3)
sum_ngh_pmf(N = 50, M = 36, m = 3, min_x = 1, max_x = 4)
```

### M = 35

-\> 0-4 with CP = 0.9802933

```{r}
sum_ngh_pmf(N = 50, M = 35, m = 3, min_x = 0, max_x = 3)
sum_ngh_pmf(N = 50, M = 35, m = 3, min_x = 1, max_x = 4)

sum_ngh_pmf(N = 50, M = 35, m = 3, min_x = 0, max_x = 4)
sum_ngh_pmf(N = 50, M = 35, m = 3, min_x = 1, max_x = 5)
```

### M = 34

-\> 0-4 with CP = 0.9726268

```{r}
sum_ngh_pmf(N = 50, M = 34, m = 3, min_x = 0, max_x = 4)
sum_ngh_pmf(N = 50, M = 34, m = 3, min_x = 1, max_x = 5)
```

### M = 33

-\> 0-4 with CP = 0.963006

```{r}
sum_ngh_pmf(N = 50, M = 33, m = 3, min_x = 0, max_x = 4)
sum_ngh_pmf(N = 50, M = 33, m = 3, min_x = 1, max_x = 5)
```

### M = 32

-\> 0-4 with CP = 0.9511876

```{r}
sum_ngh_pmf(N = 50, M = 32, m = 3, min_x = 0, max_x = 4)
sum_ngh_pmf(N = 50, M = 32, m = 3, min_x = 1, max_x = 5)
```

### M = 31

-\> 0-5 with CP = 0.9734503

```{r}
sum_ngh_pmf(N = 50, M = 31, m = 3, min_x = 0, max_x = 4)
sum_ngh_pmf(N = 50, M = 31, m = 3, min_x = 1, max_x = 5)

sum_ngh_pmf(N = 50, M = 31, m = 3, min_x = 0, max_x = 5)
sum_ngh_pmf(N = 50, M = 31, m = 3, min_x = 1, max_x = 6)
```

### M = 30

-\> 0-5 with CP = 0.9640288

```{r}
sum_ngh_pmf(N = 50, M = 30, m = 3, min_x = 0, max_x = 5)
sum_ngh_pmf(N = 50, M = 30, m = 3, min_x = 1, max_x = 6)
```

### M = 29

-\> 0-5 with CP = 0.9523043

```{r}
sum_ngh_pmf(N = 50, M = 29, m = 3, min_x = 0, max_x = 5)
sum_ngh_pmf(N = 50, M = 29, m = 3, min_x = 1, max_x = 6)
```

### M = 28

-\> 0-6 with CP = 0.9704975

```{r}
sum_ngh_pmf(N = 50, M = 28, m = 3, min_x = 0, max_x = 5)
sum_ngh_pmf(N = 50, M = 28, m = 3, min_x = 1, max_x = 6)

sum_ngh_pmf(N = 50, M = 28, m = 3, min_x = 0, max_x = 6)
sum_ngh_pmf(N = 50, M = 28, m = 3, min_x = 1, max_x = 7)
```

### M = 27

-\> 0-6 with CP = 0.9600445

```{r}
sum_ngh_pmf(N = 50, M = 27, m = 3, min_x = 0, max_x = 6)
sum_ngh_pmf(N = 50, M = 27, m = 3, min_x = 1, max_x = 7)
```

### M = 26

-\> 0-7 with CP = 0.9732304

```{r}
sum_ngh_pmf(N = 50, M = 26, m = 3, min_x = 0, max_x = 6)
sum_ngh_pmf(N = 50, M = 26, m = 3, min_x = 1, max_x = 7)

sum_ngh_pmf(N = 50, M = 26, m = 3, min_x = 0, max_x = 7)
sum_ngh_pmf(N = 50, M = 26, m = 3, min_x = 1, max_x = 8)
```

### M = 25

-\> 0-7 with CP = 0.9631225

```{r}
sum_ngh_pmf(N = 50, M = 25, m = 3, min_x = 0, max_x = 7)
sum_ngh_pmf(N = 50, M = 25, m = 3, min_x = 1, max_x = 8)
```

### M = 24

-\> 0-7 with CP = 0.9502069

```{r}
sum_ngh_pmf(N = 50, M = 24, m = 3, min_x = 0, max_x = 7)
sum_ngh_pmf(N = 50, M = 24, m = 3, min_x = 1, max_x = 8)
```

### M = 23

-\> 0-8 with CP = 0.9627122

```{r}
sum_ngh_pmf(N = 50, M = 23, m = 3, min_x = 0, max_x = 7)
sum_ngh_pmf(N = 50, M = 23, m = 3, min_x = 1, max_x = 8)

sum_ngh_pmf(N = 50, M = 23, m = 3, min_x = 0, max_x = 8)
sum_ngh_pmf(N = 50, M = 23, m = 3, min_x = 1, max_x = 9)
```

### M = 22

-\> 0-9 with CP = 0.9708871

```{r}
sum_ngh_pmf(N = 50, M = 22, m = 3, min_x = 0, max_x = 8)
sum_ngh_pmf(N = 50, M = 22, m = 3, min_x = 1, max_x = 9)

sum_ngh_pmf(N = 50, M = 22, m = 3, min_x = 0, max_x = 9)
sum_ngh_pmf(N = 50, M = 22, m = 3, min_x = 1, max_x = 10)
```

### M = 21

-\> 0-9 with CP = 0.9589394

```{r}
sum_ngh_pmf(N = 50, M = 21, m = 3, min_x = 0, max_x = 9)
sum_ngh_pmf(N = 50, M = 21, m = 3, min_x = 1, max_x = 10)
```

### M = 20

-\> 0-10 with CP = 0.9655391

```{r}
sum_ngh_pmf(N = 50, M = 20, m = 3, min_x = 0, max_x = 9)
sum_ngh_pmf(N = 50, M = 20, m = 3, min_x = 1, max_x = 10)

sum_ngh_pmf(N = 50, M = 20, m = 3, min_x = 0, max_x = 10)
sum_ngh_pmf(N = 50, M = 20, m = 3, min_x = 1, max_x = 11)
```

### M = 19

-\> 0-10 with CP = 0.951061

```{r}
sum_ngh_pmf(N = 50, M = 19, m = 3, min_x = 0, max_x = 10)
sum_ngh_pmf(N = 50, M = 19, m = 3, min_x = 1, max_x = 11)
```

### M = 18

-\> 0-11 with CP = 0.9559944

```{r}
sum_ngh_pmf(N = 50, M = 18, m = 3, min_x = 0, max_x = 10)
sum_ngh_pmf(N = 50, M = 18, m = 3, min_x = 1, max_x = 11)

sum_ngh_pmf(N = 50, M = 18, m = 3, min_x = 0, max_x = 11)
sum_ngh_pmf(N = 50, M = 18, m = 3, min_x = 1, max_x = 12)
```

### M = 17

-\> 0-12 with CP = 0.958723

```{r}
sum_ngh_pmf(N = 50, M = 17, m = 3, min_x = 0, max_x = 11)
sum_ngh_pmf(N = 50, M = 17, m = 3, min_x = 1, max_x = 12)

sum_ngh_pmf(N = 50, M = 17, m = 3, min_x = 0, max_x = 12)
sum_ngh_pmf(N = 50, M = 17, m = 3, min_x = 1, max_x = 13)
```

### M = 16

-\> 0-13 with CP = 0.959596

```{r}
sum_ngh_pmf(N = 50, M = 16, m = 3, min_x = 0, max_x = 12)
sum_ngh_pmf(N = 50, M = 16, m = 3, min_x = 1, max_x = 13)

sum_ngh_pmf(N = 50, M = 16, m = 3, min_x = 0, max_x = 13)
sum_ngh_pmf(N = 50, M = 16, m = 3, min_x = 1, max_x = 14)
```

### M = 15

-\> 0-14 with CP = 0.958723

```{r}
sum_ngh_pmf(N = 50, M = 15, m = 3, min_x = 0, max_x = 13)
sum_ngh_pmf(N = 50, M = 15, m = 3, min_x = 1, max_x = 14)

sum_ngh_pmf(N = 50, M = 15, m = 3, min_x = 0, max_x = 14)
sum_ngh_pmf(N = 50, M = 15, m = 3, min_x = 1, max_x = 15)
```

### M = 14

-\> 0-15 with CP = 0.9559944

-\> 1-16 with CP = 0.9512364

```{r}
sum_ngh_pmf(N = 50, M = 14, m = 3, min_x = 0, max_x = 14)
sum_ngh_pmf(N = 50, M = 14, m = 3, min_x = 1, max_x = 15)

sum_ngh_pmf(N = 50, M = 14, m = 3, min_x = 0, max_x = 15)
sum_ngh_pmf(N = 50, M = 14, m = 3, min_x = 1, max_x = 16)
sum_ngh_pmf(N = 50, M = 14, m = 3, min_x = 2, max_x = 17)
```

### M = 13

-\> 0-16 with CP = 0.951061

-\> 1-17 with CP = 0.9509473

```{r}
sum_ngh_pmf(N = 50, M = 13, m = 3, min_x = 0, max_x = 15)
sum_ngh_pmf(N = 50, M = 13, m = 3, min_x = 1, max_x = 16)
sum_ngh_pmf(N = 50, M = 13, m = 3, min_x = 2, max_x = 17)

sum_ngh_pmf(N = 50, M = 13, m = 3, min_x = 0, max_x = 16)
sum_ngh_pmf(N = 50, M = 13, m = 3, min_x = 1, max_x = 17)
sum_ngh_pmf(N = 50, M = 13, m = 3, min_x = 2, max_x = 18)
```

### M = 12

-\> 0-18 with CP = 0.9589394

-\> 1-19 with CP = 0.9596626

```{r}
sum_ngh_pmf(N = 50, M = 12, m = 3, min_x = 0, max_x = 16)
sum_ngh_pmf(N = 50, M = 12, m = 3, min_x = 1, max_x = 17)
sum_ngh_pmf(N = 50, M = 12, m = 3, min_x = 2, max_x = 18)

sum_ngh_pmf(N = 50, M = 12, m = 3, min_x = 0, max_x = 17)
sum_ngh_pmf(N = 50, M = 12, m = 3, min_x = 1, max_x = 18)
sum_ngh_pmf(N = 50, M = 12, m = 3, min_x = 2, max_x = 19)

sum_ngh_pmf(N = 50, M = 12, m = 3, min_x = 0, max_x = 18)
sum_ngh_pmf(N = 50, M = 12, m = 3, min_x = 1, max_x = 19)
sum_ngh_pmf(N = 50, M = 12, m = 3, min_x = 2, max_x = 20)
```

### M = 11

-\> 1-20 with CP = 0.9542938

```{r}
sum_ngh_pmf(N = 50, M = 11, m = 3, min_x = 0, max_x = 18)
sum_ngh_pmf(N = 50, M = 11, m = 3, min_x = 1, max_x = 19)
sum_ngh_pmf(N = 50, M = 11, m = 3, min_x = 2, max_x = 20)

sum_ngh_pmf(N = 50, M = 11, m = 3, min_x = 0, max_x = 19)
sum_ngh_pmf(N = 50, M = 11, m = 3, min_x = 1, max_x = 20)
sum_ngh_pmf(N = 50, M = 11, m = 3, min_x = 2, max_x = 21)
```

### M = 10

-\> 1-22 with CP = 0.9570001

-\> 2-23 with CP = 0.9514762

```{r}
sum_ngh_pmf(N = 50, M = 10, m = 3, min_x = 1, max_x = 20)
sum_ngh_pmf(N = 50, M = 10, m = 3, min_x = 2, max_x = 21)

sum_ngh_pmf(N = 50, M = 10, m = 3, min_x = 1, max_x = 21)
sum_ngh_pmf(N = 50, M = 10, m = 3, min_x = 2, max_x = 22)

sum_ngh_pmf(N = 50, M = 10, m = 3, min_x = 1, max_x = 22)
sum_ngh_pmf(N = 50, M = 10, m = 3, min_x = 2, max_x = 23)
sum_ngh_pmf(N = 50, M = 10, m = 3, min_x = 3, max_x = 24)
```

### M = 9

-\> 1-24 with CP = 0.9557588

-\> 2-25 with CP = 0.954996

```{r}
sum_ngh_pmf(N = 50, M = 9, m = 3, min_x = 1, max_x = 22)
sum_ngh_pmf(N = 50, M = 9, m = 3, min_x = 2, max_x = 23)
sum_ngh_pmf(N = 50, M = 9, m = 3, min_x = 3, max_x = 24)

sum_ngh_pmf(N = 50, M = 9, m = 3, min_x = 1, max_x = 23)
sum_ngh_pmf(N = 50, M = 9, m = 3, min_x = 2, max_x = 24)
sum_ngh_pmf(N = 50, M = 9, m = 3, min_x = 3, max_x = 25)

sum_ngh_pmf(N = 50, M = 9, m = 3, min_x = 1, max_x = 24)
sum_ngh_pmf(N = 50, M = 9, m = 3, min_x = 2, max_x = 25)
sum_ngh_pmf(N = 50, M = 9, m = 3, min_x = 3, max_x = 26)
```

### M = 8

-\> 2-27 with CP = 0.9535121

```{r}
sum_ngh_pmf(N = 50, M = 8, m = 3, min_x = 1, max_x = 24)
sum_ngh_pmf(N = 50, M = 8, m = 3, min_x = 2, max_x = 25)
sum_ngh_pmf(N = 50, M = 8, m = 3, min_x = 3, max_x = 26)
sum_ngh_pmf(N = 50, M = 8, m = 3, min_x = 4, max_x = 27)

sum_ngh_pmf(N = 50, M = 8, m = 3, min_x = 1, max_x = 25)
sum_ngh_pmf(N = 50, M = 8, m = 3, min_x = 2, max_x = 26)
sum_ngh_pmf(N = 50, M = 8, m = 3, min_x = 3, max_x = 27)

sum_ngh_pmf(N = 50, M = 8, m = 3, min_x = 1, max_x = 26)
sum_ngh_pmf(N = 50, M = 8, m = 3, min_x = 2, max_x = 27)
sum_ngh_pmf(N = 50, M = 8, m = 3, min_x = 3, max_x = 28)
```

### M = 7

-\> 2-30 with CP = 0.9563191

-\> 3-31 with CP = 0.9569898

-\> 4-32 with CP = 0.9510655

```{r}
sum_ngh_pmf(N = 50, M = 7, m = 3, min_x = 2, max_x = 27)
sum_ngh_pmf(N = 50, M = 7, m = 3, min_x = 3, max_x = 28)
sum_ngh_pmf(N = 50, M = 7, m = 3, min_x = 4, max_x = 29)
sum_ngh_pmf(N = 50, M = 7, m = 3, min_x = 5, max_x = 30)

sum_ngh_pmf(N = 50, M = 7, m = 3, min_x = 2, max_x = 28)
sum_ngh_pmf(N = 50, M = 7, m = 3, min_x = 3, max_x = 29)
sum_ngh_pmf(N = 50, M = 7, m = 3, min_x = 4, max_x = 30)

sum_ngh_pmf(N = 50, M = 7, m = 3, min_x = 2, max_x = 29)
sum_ngh_pmf(N = 50, M = 7, m = 3, min_x = 3, max_x = 30)
sum_ngh_pmf(N = 50, M = 7, m = 3, min_x = 4, max_x = 31)

sum_ngh_pmf(N = 50, M = 7, m = 3, min_x = 2, max_x = 30)
sum_ngh_pmf(N = 50, M = 7, m = 3, min_x = 3, max_x = 31)
sum_ngh_pmf(N = 50, M = 7, m = 3, min_x = 4, max_x = 32)
sum_ngh_pmf(N = 50, M = 7, m = 3, min_x = 5, max_x = 33)
```

### M = 6

-\> 2-33 with CP = 0.9517038

-\> 3-34 with CP = 0.9576847

-\> 4-35 with CP = 0.9585707

-\> 5-36 with CP = 0.954221

```{r}
sum_ngh_pmf(N = 50, M = 6, m = 3, min_x = 2, max_x = 30)
sum_ngh_pmf(N = 50, M = 6, m = 3, min_x = 3, max_x = 31)
sum_ngh_pmf(N = 50, M = 6, m = 3, min_x = 4, max_x = 32)
sum_ngh_pmf(N = 50, M = 6, m = 3, min_x = 5, max_x = 33)
sum_ngh_pmf(N = 50, M = 6, m = 3, min_x = 6, max_x = 34)

sum_ngh_pmf(N = 50, M = 6, m = 3, min_x = 2, max_x = 31)
sum_ngh_pmf(N = 50, M = 6, m = 3, min_x = 3, max_x = 32)
sum_ngh_pmf(N = 50, M = 6, m = 3, min_x = 4, max_x = 33)
sum_ngh_pmf(N = 50, M = 6, m = 3, min_x = 5, max_x = 34)

sum_ngh_pmf(N = 50, M = 6, m = 3, min_x = 2, max_x = 32)
sum_ngh_pmf(N = 50, M = 6, m = 3, min_x = 3, max_x = 33)
sum_ngh_pmf(N = 50, M = 6, m = 3, min_x = 4, max_x = 34)
sum_ngh_pmf(N = 50, M = 6, m = 3, min_x = 5, max_x = 35)

sum_ngh_pmf(N = 50, M = 6, m = 3, min_x = 2, max_x = 33)
sum_ngh_pmf(N = 50, M = 6, m = 3, min_x = 3, max_x = 34)
sum_ngh_pmf(N = 50, M = 6, m = 3, min_x = 4, max_x = 35)
sum_ngh_pmf(N = 50, M = 6, m = 3, min_x = 5, max_x = 36)
sum_ngh_pmf(N = 50, M = 6, m = 3, min_x = 6, max_x = 37)
```

### M = 5

-\> 6-39 with CP = 0.9516585

```{r}
sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 2, max_x = 33)
sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 3, max_x = 34)
sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 4, max_x = 35)
sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 5, max_x = 36)
sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 6, max_x = 37)
sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 7, max_x = 38)
sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 8, max_x = 39)

sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 2, max_x = 34)
sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 3, max_x = 35)
sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 4, max_x = 36)
sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 5, max_x = 37)
sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 6, max_x = 38)
sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 7, max_x = 39)
sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 8, max_x = 40)

sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 2, max_x = 35)
sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 3, max_x = 36)
sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 4, max_x = 37)
sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 5, max_x = 38)
sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 6, max_x = 39)
sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 7, max_x = 40)
sum_ngh_pmf(N = 50, M = 5, m = 3, min_x = 8, max_x = 41)
```

### M = 4

-\> 8-43 with CP = 0.9504776

-\> 9-44 with CP = 0.9563396

-\> 10-45 with CP = 0.9566522

-\> 11-46 with CP = 0.9387538

```{r}
sum_ngh_pmf(N = 50, M = 4, m = 3, min_x = 6, max_x = 39)
sum_ngh_pmf(N = 50, M = 4, m = 3, min_x = 7, max_x = 40)
sum_ngh_pmf(N = 50, M = 4, m = 3, min_x = 8, max_x = 41)
sum_ngh_pmf(N = 50, M = 4, m = 3, min_x = 9, max_x = 42)
sum_ngh_pmf(N = 50, M = 4, m = 3, min_x = 10, max_x = 43)
sum_ngh_pmf(N = 50, M = 4, m = 3, min_x = 11, max_x = 44)
sum_ngh_pmf(N = 50, M = 4, m = 3, min_x = 12, max_x = 45)

sum_ngh_pmf(N = 50, M = 4, m = 3, min_x = 6, max_x = 40)
sum_ngh_pmf(N = 50, M = 4, m = 3, min_x = 7, max_x = 41)
sum_ngh_pmf(N = 50, M = 4, m = 3, min_x = 8, max_x = 42)
sum_ngh_pmf(N = 50, M = 4, m = 3, min_x = 9, max_x = 43)
sum_ngh_pmf(N = 50, M = 4, m = 3, min_x = 10, max_x = 44)
sum_ngh_pmf(N = 50, M = 4, m = 3, min_x = 11, max_x = 45)

sum_ngh_pmf(N = 50, M = 4, m = 3, min_x = 6, max_x = 41)
sum_ngh_pmf(N = 50, M = 4, m = 3, min_x = 7, max_x = 42)
sum_ngh_pmf(N = 50, M = 4, m = 3, min_x = 8, max_x = 43)
sum_ngh_pmf(N = 50, M = 4, m = 3, min_x = 9, max_x = 44)
sum_ngh_pmf(N = 50, M = 4, m = 3, min_x = 10, max_x = 45)
sum_ngh_pmf(N = 50, M = 4, m = 3, min_x = 11, max_x = 46)
sum_ngh_pmf(N = 50, M = 4, m = 3, min_x = 12, max_x = 47)
```

### M = 3

-\> 12-47 with CP = 0.9814286

```{r}
sum_ngh_pmf(N = 50, M = 3, m = 3, min_x = 8, max_x = 43)
sum_ngh_pmf(N = 50, M = 3, m = 3, min_x = 9, max_x = 44)
sum_ngh_pmf(N = 50, M = 3, m = 3, min_x = 10, max_x = 45)
sum_ngh_pmf(N = 50, M = 3, m = 3, min_x = 11, max_x = 46)
sum_ngh_pmf(N = 50, M = 3, m = 3, min_x = 12, max_x = 47)
```

### M = 2

-\> 48-48 with CP = 0

```{r}
sum_ngh_pmf(N = 50, M = 2, m = 3, min_x = 48, max_x = 48)
```

### M = 1

-\> 49-49 with CP = 0

```{r}
sum_ngh_pmf(N = 50, M = 1, m = 3, min_x = 49, max_x = 49)
```

### M = 0

-\> 50-50 with CP = 0

```{r}
sum_ngh_pmf(N = 50, M = 0, m = 3, min_x = 50, max_x = 50)
```

### Plot of All Possible Minimal Cardinality Acceptance Curves

```{r}
## ACCESS FILE THROUGH GITHUB LINK FOR REPRODUCIBILITY
```
